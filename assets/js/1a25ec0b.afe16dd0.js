"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2019],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>l,MDXProvider:()=>f,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>c});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){return function(t){var r=p(t.components);return n.createElement(e,s({},t,{components:r}))}},p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},f=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),c=p(r),f=o,m=c["".concat(i,".").concat(f)]||c[f]||d[f]||s;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=m;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},82672:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(83117),o=r(80102),s=(r(67294),r(3905)),i=["components"],a={id:"features",title:"Features",sidebar_label:"Features"},u=void 0,l={unversionedId:"features",id:"features",title:"Features",description:"Pyre has custom support for Python idioms that would otherwise not be supported by the usual type annotations.",source:"@site/docs/features.md",sourceDirName:".",slug:"/features",permalink:"/docs/features",draft:!1,editUrl:"https://github.com/facebook/pyre-check/tree/main/documentation/website/docs/features.md",tags:[],version:"current",frontMatter:{id:"features",title:"Features",sidebar_label:"Features"},sidebar:"pyre",previous:{title:"Querying Pyre",permalink:"/docs/querying-pyre"},next:{title:"Integrations",permalink:"/docs/category/integrations"}},c={},p=[{value:"Registering attributes using PyTorch&#39;s register_buffer",id:"registering-attributes-using-pytorchs-register_buffer",level:2}],f={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,s.mdx)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"Pyre has custom support for Python idioms that would otherwise not be supported by the usual type annotations."),(0,s.mdx)("h2",{id:"registering-attributes-using-pytorchs-register_buffer"},"Registering attributes using PyTorch's register_buffer"),(0,s.mdx)("p",null,"PyTorch allows subclasses of ",(0,s.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=nn%20module#torch.nn.Module"},(0,s.mdx)("inlineCode",{parentName:"a"},"nn.Module"))," to ",(0,s.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=register_buffer#torch.nn.Module.register_buffer"},"register")," a buffer in an object using ",(0,s.mdx)("inlineCode",{parentName:"p"},'self.register_buffer("foo", initial_value)'),". Pyre supports this pattern when used within the constructor. It simply treats the buffer as a Tensor attribute of the class:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import torch\nimport torch.nn as nn\n\nclass Foo(nn.Module):\n    def __init__(self) -> None:\n        super(Foo, self).__init__()\n        self.register_buffer("foo", torch.zeros(10, 20))\n        self.register_buffer("foo_persistent", torch.zeros(10, 20), persistent=False)\n\n    def bar(self) -> None:\n        reveal_type(self.foo) # => torch.Tensor\n        reveal_type(self.foo_persistent) # => torch.Tensor\n\ndef baz() -> None:\n    y = Foo().foo\n    reveal_type(y) # => torch.Tensor\n')),(0,s.mdx)("p",null,"Note that Pyre will not recognize buffers registered in methods other than the constructor (just like it doesn't recognize ",(0,s.mdx)("a",{parentName:"p",href:"/docs/errors#16-missing-attributes"},"attributes")," defined in methods other than the constructor)."),(0,s.mdx)("p",null,"It will also not recognize buffers that are initialized with ",(0,s.mdx)("inlineCode",{parentName:"p"},"None")," since it cannot infer the exact type of the buffer. In such a case, you can tell Pyre about the attribute's type by explicitly defining it in the class:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import torch\nimport torch.nn as nn\nfrom typing import Optional\n\nclass Foo(nn.Module):\n    my_none_buffer: Optional[torch.Tensor]\n\n    def __init__(self) -> None:\n        super(Foo, self).__init__()\n        self.register_buffer("my_none_buffer", None)\n\n    def bar(self) -> None:\n        reveal_type(self.my_none_buffer) # => Optional[torch.Tensor]\n')))}d.isMDXComponent=!0}}]);