"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9715],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>y,useMDXComponents:()=>c,withMDXComponents:()=>u});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),u=function(e){return function(n){var t=c(n.components);return a.createElement(e,r({},n,{components:t}))}},c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},51600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=t(83117),o=t(80102),r=(t(67294),t(3905)),s=(t(44996),["components"]),i={id:"pysa-shipping-rules-models",title:"Shipping Pysa Models and Rules",sidebar_label:"Shipping Pysa Models and Rules"},l=void 0,p={unversionedId:"pysa-shipping-rules-models",id:"pysa-shipping-rules-models",title:"Shipping Pysa Models and Rules",description:"We welcome contributions and coverage improvements for Pysa! This page walks you through the basics of adding new models or rules, and testing your changes.",source:"@site/docs/pysa_shipping_rules_models.md",sourceDirName:".",slug:"/pysa-shipping-rules-models",permalink:"/docs/pysa-shipping-rules-models",draft:!1,editUrl:"https://github.com/facebook/pyre-check/tree/main/documentation/website/docs/pysa_shipping_rules_models.md",tags:[],version:"current",frontMatter:{id:"pysa-shipping-rules-models",title:"Shipping Pysa Models and Rules",sidebar_label:"Shipping Pysa Models and Rules"},sidebar:"pysa",previous:{title:"Running Pysa",permalink:"/docs/pysa-running"},next:{title:"Dynamically Generating Models",permalink:"/docs/pysa-model-generators"}},u={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Where to put your models / <code>taint.config</code> changes",id:"where-to-put-your-models--taintconfig-changes",level:2},{value:"Writing your models / <code>taint.config</code> changes",id:"writing-your-models--taintconfig-changes",level:2},{value:"Testing",id:"testing",level:2},{value:"Catching Known Issues",id:"catching-known-issues",level:3},{value:"Integration Test",id:"integration-test",level:3},{value:"Contributing Coverage Improvements to Pysa",id:"contributing-coverage-improvements-to-pysa",level:2}],d={toc:c};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.mdx)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"We welcome contributions and coverage improvements for Pysa! This page walks you through the basics of adding new models or rules, and testing your changes."),(0,r.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.mdx)("p",null,"This document assumes you:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Have followed ",(0,r.mdx)("a",{parentName:"li",href:"/docs/pysa-quickstart"},"these instructions")," to set up Pysa and SAPP."),(0,r.mdx)("li",{parentName:"ol"},"Understand the ",(0,r.mdx)("a",{parentName:"li",href:"/docs/pysa-basics"},"basic concepts of sources, sinks, sanitizers, and\nrules")," as well as ",(0,r.mdx)("a",{parentName:"li",href:"/docs/pysa-features"},"features"),"."),(0,r.mdx)("li",{parentName:"ol"},"Have completed a ",(0,r.mdx)("a",{parentName:"li",href:"/docs/pysa-running"},"successful run of Pysa")),(0,r.mdx)("li",{parentName:"ol"},"Know the sources and sinks you'd like to detect.")),(0,r.mdx)("p",null,"Ideally, you will also have completed the Pysa tutorial (",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/documentation/pysa_tutorial"},"code"),",\n",(0,r.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=8I3zlvtpOww"},"video"),")."),(0,r.mdx)("h2",{id:"where-to-put-your-models--taintconfig-changes"},"Where to put your models / ",(0,r.mdx)("inlineCode",{parentName:"h2"},"taint.config")," changes"),(0,r.mdx)("p",null,"Common privacy/security-related rules and models should be placed under ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/stubs/taint/core_privacy_security"},(0,r.mdx)("inlineCode",{parentName:"a"},"stubs/taint/core_privacy_security")),". These should only reference entities that exist in the Python standard library, or the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/stubs"},"type stubs")," that are shipped with Pyre."),(0,r.mdx)("p",null,"Models for third-party libraries should be placed under ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/stubs/third_party_taint"},(0,r.mdx)("inlineCode",{parentName:"a"},"stubs/third_party_taint")),"."),(0,r.mdx)("h2",{id:"writing-your-models--taintconfig-changes"},"Writing your models / ",(0,r.mdx)("inlineCode",{parentName:"h2"},"taint.config")," changes"),(0,r.mdx)("p",null,"Refer to the docs on ",(0,r.mdx)("a",{parentName:"p",href:"/docs/pysa-basics"},"sources, sinks, sanitizers, rules"),", and\n",(0,r.mdx)("a",{parentName:"p",href:"/docs/pysa-features"},"features")," when you need help. You can usually find\npre-existing examples of\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/stubs/taint/core_privacy_security/flask_sources_sinks.pysa"},"sources"),",\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/stubs/taint/core_privacy_security/filesystem_sinks.pysa"},"sinks"),",\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/stubs/taint/core_privacy_security/sanitizers.pysa"},"sanitizers"),",\nand\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/stubs/taint/core_privacy_security/django_sources_sinks.pysa"},"features"),"\nto copy as a starting point if you get stuck."),(0,r.mdx)("p",null,"When adding models for a pre-existing source/sink/feature type (e.g.\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/stubs/taint/core_privacy_security/taint.config#L21"},(0,r.mdx)("inlineCode",{parentName:"a"},"UserControlled")),",\nyou won't need to modify ",(0,r.mdx)("inlineCode",{parentName:"p"},"taint.config"),". Make sure to check for pre-existing\nsource, sink, and feature declarations before declaring a new one; most types of\nsource and sinks are already declared, and it can be more sustainable to add an\nadditional model to an existing category, rather than creating a whole new one."),(0,r.mdx)("p",null,"When adding a new rule, you will need to update ",(0,r.mdx)("inlineCode",{parentName:"p"},"taint.config"),". As with the\nprevious paragraph, try to put existing sources and sinks to use. For example,\nif you're writing a sensitive data logging rule, using the\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/stubs/taint/core_privacy_security/taint.config#L115"},(0,r.mdx)("inlineCode",{parentName:"a"},"Logging")),"\nsink will allow you to detect your chosen data flowing into many different types of loggers that we model."),(0,r.mdx)("h2",{id:"testing"},"Testing"),(0,r.mdx)("p",null,"Providing a quick explanation of the issue you intended to catch and evidence that the issue was caught in your local run is usually sufficient. This can be in the form of a screenshot of the issue in SAPP, a sample or paste of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"taint-output.json")," produced by Pysa, etc."),(0,r.mdx)("h3",{id:"catching-known-issues"},"Catching Known Issues"),(0,r.mdx)("p",null,"To test, you need to have an issue that you want to find. The best option is to\nhave a known vulnerability from ",(0,r.mdx)("a",{parentName:"p",href:"https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=python"},"a past CVE"),"\nor issue. You can manually identify the flow of data that caused the issue, make\nsure you have the correct sources and sinks, and then verify that your new\nrule/source/sink catches the issue."),(0,r.mdx)("p",null,"Follow ",(0,r.mdx)("a",{parentName:"p",href:"/docs/pysa-quickstart"},"these instructions")," to run Pysa and import the\nresults into the SAPP UI."),(0,r.mdx)("p",null,"Once your run completes, you should be able to see the issue you intended to\ncatch in the UI. If there are a lot of issues showing up, you may need to use\n",(0,r.mdx)("a",{parentName:"p",href:"https://pyre-check.org/docs/pysa-quickstart#run-sapp"},"filters")," to find the\nparticular issue you were looking for. If you're not finding your\nissue, read through the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/pysa-tips"},"development tips")," for help debugging."),(0,r.mdx)("h3",{id:"integration-test"},"Integration Test"),(0,r.mdx)("p",null,"If you don't have an existing project to test on, you can also use the integration\ntest environment provided with the pyre-check repo. This is a minimal, deliberately\nvulnerable Flask web app. You can find all the details and instructions on how to set\nit up ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/documentation/deliberately_vulnerable_flask_app"},"here"),"."),(0,r.mdx)("p",null,"It should already be set up to use the taint models in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"pyre-check/stubs")," folder,\nso you can easily make your changes to existing Pysa models and observe the effects."),(0,r.mdx)("p",null,"For example, suppose we wanted to add a new rule for some builtin Python functions.\nWe would add our new source, sink and rule in ",(0,r.mdx)("inlineCode",{parentName:"p"},"stubs/taint/core_privacy_security/taint.config"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    ...\n    "sources": [\n        ...,\n        {\n            "name": "Foo",\n            "comment": "used to annotate a foo source"\n        },\n    ],\n    "sinks": [\n        ...,\n        {\n            "name": "Bar",\n            "comment": "used to annotate a bar sink"\n        },\n    ],\n    "rules": [\n        ...,\n        {\n            "name": "Foo to Bar",\n            "code": 9000,\n            "sources": [\n                "Foo"\n            ],\n            "sinks": [\n                "Bar"\n            ],\n            "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"\n        },\n    ],\n}\n')),(0,r.mdx)("p",null,"Make sure your new rule has a unique number and new source and sink names are also unique!"),(0,r.mdx)("p",null,"We can now add our models in a ",(0,r.mdx)("inlineCode",{parentName:"p"},".pysa")," file under ",(0,r.mdx)("inlineCode",{parentName:"p"},"stubs/taint/core_privacy_security/"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def input() -> TaintSource[Foo]: ...\ndef ascii(__source: TaintSink[Bar]): ...\n")),(0,r.mdx)("p",null,"Then, we can open a source file in the vulnerable Flask app\n(e.g. ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/documentation/deliberately_vulnerable_flask_app/app.py"},(0,r.mdx)("inlineCode",{parentName:"a"},"app.py")),"),\nand inject an issue of the type we want to catch:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def alarm1() -> None:\n    x = input()\n    ascii(x)\n")),(0,r.mdx)("p",null,"Finally, we can run the integration test using the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/d82759a1f1ce5467aa2250708b226790c046f207/documentation/deliberately_vulnerable_flask_app/run_integration_tests.sh"},(0,r.mdx)("inlineCode",{parentName:"a"},"run_integration_tests.sh"))," script (or just run ",(0,r.mdx)("inlineCode",{parentName:"p"},"pyre analyze"),")\nand verify that the issue we expect to be caught is indeed caught:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'ERROR ----BEGIN PYSA INTEGRATION TEST ERROR----\nERROR Output differs from expected:\n...\n@@ -46,5 +46,11 @@\n    ...\n+  },\n+  {\n+    "code": 9000,\n+    "define": "app.alarm1",\n+    "description": "Foo to Bar [9000]: Data from [Foo] source(s) may reach [Bar] sink(s)",\n+    "path": "app.py"\n   }\n ]\nERROR ----END PYSA INTEGRATION TEST ERROR----\n')),(0,r.mdx)("h2",{id:"contributing-coverage-improvements-to-pysa"},"Contributing Coverage Improvements to Pysa"),(0,r.mdx)("p",null,"When you've proven that you can catch issues with your changes, send a PR\nto the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check"},"pyre-check")," Github repository.\nPlease make sure you include a test plan in your PR that follows the\n",(0,r.mdx)("a",{parentName:"p",href:"#testing"},"testing")," guidelines mentioned above!"),(0,r.mdx)("p",null,"If you used the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/documentation/deliberately_vulnerable_flask_app"},"deliberately_vulnerable_flask_app")," for testing, free to also\ninclude your integration test changes with your injected issue in your PR to\nhelp us expand our open source integration tests! Note this will require you to update the\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/blob/main/documentation/deliberately_vulnerable_flask_app/full_result.json"},(0,r.mdx)("inlineCode",{parentName:"a"},"full_result.json"))," file in the same folder. When you run the integration test script, a\n",(0,r.mdx)("inlineCode",{parentName:"p"},"full_result.actual")," file will be produced when the output does not match\nthe existing expected output. Simply copy the contents of that file to\n",(0,r.mdx)("inlineCode",{parentName:"p"},"full_result.json"),", e.g. in the example above, we would add the following lines to ",(0,r.mdx)("inlineCode",{parentName:"p"},"full_result.json"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'    ...\n    {\n        "code": 9000,\n        "column": 10,\n        "define": "app.alarm1",\n        "description": "Foo to Bar [9000]: Data from [Foo] source(s) may reach [Bar] sink(s)",\n        "line": 64,\n        "name": "Foo to Bar",\n        "path": "app.py",\n        "stop_column": 11,\n        "stop_line": 64\n    }\n]\n')))}m.isMDXComponent=!0}}]);