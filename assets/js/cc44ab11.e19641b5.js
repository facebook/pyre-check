"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5445],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>u,withMDXComponents:()=>d});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},a.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),d=function(e){return function(n){var t=u(n.components);return o.createElement(e,a({},n,{components:t}))}},u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return t?o.createElement(f,l(l({ref:n},s),{},{components:t})):o.createElement(f,l({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>v,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var o,r=t(83117),a=t(80102),i=(t(67294),t(3905)),l=t(86341),c=["components"],s={id:"code-5001-public",title:"5001 - Code Injection",sidebar_label:"5001 - Code Injection"},d=void 0,u={unversionedId:"warning_codes/code-5001-public",id:"warning_codes/code-5001-public",title:"5001 - Code Injection",description:"TL;DR",source:"@site/docs/warning_codes/5001.md",sourceDirName:"warning_codes",slug:"/warning_codes/code-5001-public",permalink:"/docs/warning_codes/code-5001-public",draft:!1,editUrl:"https://github.com/facebook/pyre-check/tree/main/documentation/website/docs/warning_codes/5001.md",tags:[],version:"current",frontMatter:{id:"code-5001-public",title:"5001 - Code Injection",sidebar_label:"5001 - Code Injection"},sidebar:"pysa",previous:{title:"Overview",permalink:"/docs/warning_codes/overview-public"},next:{title:"6065 - Commandline arguments injection",permalink:"/docs/warning_codes/code-6065-public"}},m={},p=[{value:"TL;DR",id:"tldr",level:2},{value:"RCE via Code Injection (eval/exec)",id:"rce-via-code-injection-evalexec",level:2},{value:"ISSUE",id:"issue",level:3},{value:"EXAMPLE",id:"example",level:3},{value:"RECOMMENDED SOLUTION",id:"recommended-solution",level:3},{value:"RCE via Command Injection (os.system)",id:"rce-via-command-injection-ossystem",level:2},{value:"ISSUE",id:"issue-1",level:3},{value:"EXAMPLE",id:"example-1",level:3},{value:"RECOMMENDED SOLUTION",id:"recommended-solution-1",level:3}],f=(o="SubprocessFbSolution",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}),h={toc:p};function v(e){var n=e.components,t=(0,a.Z)(e,c);return(0,i.mdx)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h2",{id:"tldr"},"TL;DR"),(0,i.mdx)("p",null,"This category indicates that user-controlled input flows into a sink that allows code or shell command execution. This directly leads to Remote Code Execution which can be assumed to mean complete compromise of the server."),(0,i.mdx)("h2",{id:"rce-via-code-injection-evalexec"},"RCE via Code Injection (eval/exec)"),(0,i.mdx)("h3",{id:"issue"},"ISSUE"),(0,i.mdx)("p",null,"The simplest kind of RCE involves user input flowing into a function such as eval or exec which are intended to interpret or run python code."),(0,i.mdx)("h3",{id:"example"},"EXAMPLE"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def update_search_account_filtering(request: HttpRequest) -> HttpResponse:\n    ...\n    if action in ["delete", "add", "update"]:\n        ...\n        filter_by_username = eval(request.POST.get("filter_by_username", "True"))\n')),(0,i.mdx)("h3",{id:"recommended-solution"},"RECOMMENDED SOLUTION"),(0,i.mdx)("p",null,"There are few reasons to use these functions, and even fewer reasons to allow a user to control the content of these functions. Generally, we recommend not making calls to these functions with user input. If you only need to eval python datatypes you can use ",(0,i.mdx)("inlineCode",{parentName:"p"},"ast.literal_eval"),". Using it on arbitrary user input can still lead to DOS attack but can't be exploited for code execution (",(0,i.mdx)("a",{parentName:"p",href:"https://docs.python.org/3/library/ast.html#ast.literal_eval"},"details"),")."),(0,i.mdx)("h2",{id:"rce-via-command-injection-ossystem"},"RCE via Command Injection (os.system)"),(0,i.mdx)("h3",{id:"issue-1"},"ISSUE"),(0,i.mdx)("p",null,"This kind of RCE involves user input flowing into a command executed in a system shell. If a user can control a portion of the command being executed in a shell, they can potentially add additional arbitrary commands to be executed."),(0,i.mdx)("h3",{id:"example-1"},"EXAMPLE"),(0,i.mdx)("p",null,"The following code is intended to run the spellcheck binary on a user provided text:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"def spellcheck(request: HttpRequest):\n    command = f\"/usr/bin/spellcheck -l {request.GET['text']}\"\n    return subprocess.getoutput(command)\n")),(0,i.mdx)("p",null,"An attacker, however, can supply a path such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"'test' && rm -rf /"),", which would result in the following command being executed: ",(0,i.mdx)("inlineCode",{parentName:"p"},"/usr/bin/spellcheck -l 'test' && rm -rf /"),". Since this command is executed in a system shell the ",(0,i.mdx)("inlineCode",{parentName:"p"},"rm -rf /")," command will be executed after the spellcheck command."),(0,i.mdx)("h3",{id:"recommended-solution-1"},"RECOMMENDED SOLUTION"),(0,i.mdx)(l.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("p",null,"In general, we recommend avoiding creation of a subprocess and prefer using the API provided by the language.\nHowever, if you need to create a subprocess, we recommend using an API such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"subprocess.run"),", which allows you to separate arguments from the executable being invoked. ",(0,i.mdx)("strong",{parentName:"p"},"DO NOT add the ",(0,i.mdx)("inlineCode",{parentName:"strong"},"shell=True")," argument otherwise the code would still be vulnerable like the previous example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def spellcheck(request: HttpRequest):\n    command = ["/usr/bin/spellcheck", "-l", request.GET[\'text\']]\n    subprocess.run(command)\n')),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"NOTE: be conscious of the fact that arguments to an executable can still lead to code execution (e.g., the ",(0,i.mdx)("inlineCode",{parentName:"em"},"-exec")," argument of ",(0,i.mdx)("inlineCode",{parentName:"em"},"find"),")."))),(0,i.mdx)(l.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)(f,{mdxType:"SubprocessFbSolution"})))}v.isMDXComponent=!0}}]);