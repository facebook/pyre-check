"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8549],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),m=function(e){return function(n){var t=u(n.components);return a.createElement(e,o({},n,{components:t}))}},u=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=u(t),c=i,y=m["".concat(r,".").concat(c)]||m[c]||p[c]||o;return t?a.createElement(y,s(s({ref:n},d),{},{components:t})):a.createElement(y,s({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},72572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=t(83117),i=t(80102),o=(t(67294),t(3905)),r=["components"],s={id:"pysa-running",title:"Running Pysa",sidebar_label:"Running Pysa"},l=void 0,d={unversionedId:"pysa-running",id:"pysa-running",title:"Running Pysa",description:"This page walks you through the basics of running Pysa. If you want exercises to",source:"@site/docs/pysa_running.md",sourceDirName:".",slug:"/pysa-running",permalink:"/docs/pysa-running",draft:!1,editUrl:"https://github.com/facebook/pyre-check/tree/main/documentation/website/docs/pysa_running.md",tags:[],version:"current",frontMatter:{id:"pysa-running",title:"Running Pysa",sidebar_label:"Running Pysa"},sidebar:"pysa",previous:{title:"Implementation Details",permalink:"/docs/pysa-implementation-details"},next:{title:"Shipping Pysa Models and Rules",permalink:"/docs/pysa-shipping-rules-models"}},m={},u=[{value:"Setup",id:"setup",level:2},{value:"Example",id:"example",level:2},{value:"1. Source Code",id:"1-source-code",level:3},{value:"2. Taint Config",id:"2-taint-config",level:3},{value:"3. Taint Models",id:"3-taint-models",level:3},{value:"4. Pysa Configuration",id:"4-pysa-configuration",level:3},{value:"Analysis",id:"analysis",level:3},{value:"Understanding the results",id:"understanding-the-results",level:3}],c={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.mdx)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"This page walks you through the basics of running Pysa. If you want exercises to\nwalk you through using Pysa's more advanced features, check out ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/main/documentation/pysa_tutorial"},"this\ntutorial"),"."),(0,o.mdx)("h2",{id:"setup"},"Setup"),(0,o.mdx)("p",null,"The setup requires the following 4 types of files."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Source Code")," (",(0,o.mdx)("inlineCode",{parentName:"li"},"*.py"),"): This is your application's code."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Taint Config")," (",(0,o.mdx)("inlineCode",{parentName:"li"},"taint.config"),"): This file declares sources, sinks,\nfeatures, and rules."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Taint Models")," (",(0,o.mdx)("inlineCode",{parentName:"li"},".pysa"),"): These files link together the information in your\nsource code and ",(0,o.mdx)("inlineCode",{parentName:"li"},"taint.config"),". They tell Pysa where in our code there\nexist sources and sinks."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Pysa Configuration")," (",(0,o.mdx)("inlineCode",{parentName:"li"},".pyre_configuration"),"): Parts of this file are\ncritical to using Pysa. ",(0,o.mdx)("inlineCode",{parentName:"li"},"source_directories")," tells Pysa\nthe directory containing the source code you want to analyze.\n",(0,o.mdx)("inlineCode",{parentName:"li"},"taint_models_path")," tells Pysa where to find the config and model files.")),(0,o.mdx)("h2",{id:"example"},"Example"),(0,o.mdx)("p",null,"Let's look at a simple taint analysis example. To follow along, create a\ndirectory ",(0,o.mdx)("inlineCode",{parentName:"p"},"static_analysis_example")," and navigate to it. Paste the code snippets\ninto the appropriately named files."),(0,o.mdx)("h3",{id:"1-source-code"},"1. Source Code"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'# static_analysis_example/source.py\n\nimport os\n\ndef get_image(url):\n    command = "wget -q https:{}".format(url)\n    return os.system(command)\n\ndef convert():\n    image_link = input("image link: ")\n    image = get_image(image_link)\n')),(0,o.mdx)("p",null,"Notice the following:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"The ",(0,o.mdx)("inlineCode",{parentName:"li"},"input")," function is a taint source since it gets input directly from\nthe user."),(0,o.mdx)("li",{parentName:"ul"},"The ",(0,o.mdx)("inlineCode",{parentName:"li"},"os.system")," function is a taint sink, since we do not want user-controlled\nvalues to flow into it."),(0,o.mdx)("li",{parentName:"ul"},"The return value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"input")," is used as the URL for a ",(0,o.mdx)("inlineCode",{parentName:"li"},"wget")," call, which is\nexecuted by ",(0,o.mdx)("inlineCode",{parentName:"li"},"os.system"),". The ",(0,o.mdx)("inlineCode",{parentName:"li"},"wget")," can therefore be doing anything, out of\nthe programmer's control."),(0,o.mdx)("li",{parentName:"ul"},"This data flow should be identified as a potential security issue.")),(0,o.mdx)("h3",{id:"2-taint-config"},"2. Taint Config"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'# static_analysis_example/stubs/taint/core_privacy_security/taint.config\n\n{\n  "sources": [\n    {\n      "name": "UserControlled",\n      "comment": "use to annotate user input"\n    }\n  ],\n\n  "sinks": [\n    {\n      "name": "RemoteCodeExecution",\n      "comment": "use to annotate execution of code"\n    }\n  ],\n\n  "features": [],\n\n  "rules": [\n    {\n      "name": "Possible shell injection",\n      "code": 5001,\n      "sources": [ "UserControlled" ],\n      "sinks": [ "RemoteCodeExecution" ],\n      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"\n    }\n  ]\n}\n')),(0,o.mdx)("p",null,"This declares the valid sources and sinks that Pysa should recognize. We\nalso tell Pysa that data flowing from a ",(0,o.mdx)("inlineCode",{parentName:"p"},"UserControlled")," source to a\n",(0,o.mdx)("inlineCode",{parentName:"p"},"RemoteCodeExecution")," sink is a possible shell injection."),(0,o.mdx)("h3",{id:"3-taint-models"},"3. Taint Models"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# static_analysis_example/stubs/taint/core_privacy_security/general.pysa\n\n# model for raw_input\ndef input(__prompt) -> TaintSource[UserControlled]: ...\n\n# model for os.system\ndef os.system(command: TaintSink[RemoteCodeExecution]): ...\n")),(0,o.mdx)("p",null,"This file links together the information in ",(0,o.mdx)("inlineCode",{parentName:"p"},"source.py")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"taint.config"),". We\nuse it to tell Pysa where in our code there exist sources and sinks."),(0,o.mdx)("h3",{id:"4-pysa-configuration"},"4. Pysa Configuration"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'# static_analysis_example/.pyre_configuration\n\n{\n  "source_directories": ["."],\n  "taint_models_path": "stubs/taint"\n}\n')),(0,o.mdx)("p",null,"Pysa needs to know what directory to analyze, as well as where to find the config\nand model files."),(0,o.mdx)("h3",{id:"analysis"},"Analysis"),(0,o.mdx)("p",null,"Now let's run the static analysis:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-shell"},'[~/static_analysis_example] $ pyre analyze\n \u019b Fixpoint iterations: 2\n[\n  {\n    "line": 9,\n    "column": 22,\n    "path": "source.py",\n    "code": 5001,\n    "name": "Possible shell injection",\n    "description":\n      "Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)",\n    "long_description":\n      "Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)",\n    "concise_description":\n      "Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)",\n    "define": "source.convert"\n  }\n]\n')),(0,o.mdx)("p",null,"Looking at the output, we see that pyre surfaces the tainted data flow that we\nexpected."),(0,o.mdx)("p",null,"Let's run it again and save the results:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-shell"},"[~/static_analysis_example] $ pyre analyze --save-results-to ./\n")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"--save-results-to")," option will save more detailed results to\n",(0,o.mdx)("inlineCode",{parentName:"p"},"./taint-output.json"),"."),(0,o.mdx)("h3",{id:"understanding-the-results"},"Understanding the results"),(0,o.mdx)("p",null,"See ",(0,o.mdx)("a",{parentName:"p",href:"/docs/static-analysis-post-processor"},"Static Analysis Post Processor"),"."))}p.isMDXComponent=!0}}]);