(** Copyright (c) 2016-present, Facebook, Inc.

    This source code is licensed under the MIT license found in the
    LICENSE file in the root directory of this source tree. *)

open AstExpression

module Location = AstLocation
module Statement = AstStatement


module Ignore : sig
  type kind =
    | TypeIgnore
    | PyreFixme
    | PyreIgnore
  [@@deriving compare, eq, show, sexp, hash]

  type t = {
    ignored_line: int;
    codes: int list;
    location: Location.t;
    kind: kind;
  }
  [@@deriving compare, eq, show, sexp, hash]

  val create
    :  ignored_line:int
    -> codes:int list
    -> location:Location.t
    -> kind:kind
    -> t

  val ignored_line: t -> int
  val codes: t -> int list
  val location: t -> Location.t
  val kind: t -> kind
  val key: t -> Location.t
end


module Metadata : sig
  type t = {
    autogenerated: bool;
    debug: bool;
    declare: bool;
    ignore_lines: Ignore.t list;
    strict: bool;
    version: int;
  }
  [@@deriving compare, eq, show]

  val create
    :  ?autogenerated: bool
    -> ?debug: bool
    -> ?declare: bool
    -> ?ignore_lines: Ignore.t list
    -> ?strict: bool
    -> ?version: int
    -> unit
    -> t

  val parse: string -> string list -> t
end

type t = {
  docstring: string option;
  metadata: Metadata.t;
  path: string;
  qualifier: Access.t;
  statements: Statement.t list;
}
[@@deriving compare, eq, show]


val create
  :  ?docstring: string option
  -> ?metadata: Metadata.t
  -> ?path: string
  -> ?qualifier: Access.t
  -> Statement.t list
  -> t


val ignore_lines: t -> Ignore.t list

val qualifier: path:string -> Access.t
