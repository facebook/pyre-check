[
  {
    "code": 5005,
    "column": 16,
    "define": "app.definite_sql",
    "description": "SQL injection. [5005]: Data from [UserControlled] source(s) may reach [StringMayBeSQL] sink(s)",
    "line": 52,
    "name": "SQL injection.",
    "path": "app.py",
    "stop_column": 62,
    "stop_line": 52
  },
  {
    "code": 5005,
    "column": 16,
    "define": "app.definite_sql",
    "description": "SQL injection. [5005]: Data from [UserControlled] source(s) may reach [SQL] sink(s)",
    "line": 52,
    "name": "SQL injection.",
    "path": "app.py",
    "stop_column": 62,
    "stop_line": 52
  },
  {
    "code": 5007,
    "column": 21,
    "define": "app.definite_xxe",
    "description": "User data to XML Parser. [5007]: Data from [UserControlled] source(s) may reach [XMLParser] sink(s)",
    "line": 62,
    "name": "User data to XML Parser.",
    "path": "app.py",
    "stop_column": 28,
    "stop_line": 62
  },
  {
    "code": 5008,
    "column": 40,
    "define": "flask.sessions.SecureCookieSessionInterface.save_session",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 380,
    "name": "XSS",
    "path": "*",
    "stop_column": 43,
    "stop_line": 380
  },
  {
    "code": 5008,
    "column": 35,
    "define": "flask.app.Flask.__init__",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 708,
    "name": "XSS",
    "path": "*",
    "stop_column": 39,
    "stop_line": 708
  },
  {
    "code": 5008,
    "column": 37,
    "define": "flask.app.Flask.full_dispatch_request",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 1826,
    "name": "XSS",
    "path": "*",
    "stop_column": 39,
    "stop_line": 1826
  },
  {
    "code": 5008,
    "column": 37,
    "define": "flask.app.Flask.full_dispatch_request",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 1826,
    "name": "XSS",
    "path": "*",
    "stop_column": 39,
    "stop_line": 1826
  },
  {
    "code": 5008,
    "column": 48,
    "define": "flask.app.Flask.process_response",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 2343,
    "name": "XSS",
    "path": "*",
    "stop_column": 52,
    "stop_line": 2343
  },
  {
    "code": 5008,
    "column": 16,
    "define": "flask.app.Flask.wsgi_app",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 2527,
    "name": "XSS",
    "path": "*",
    "stop_column": 19,
    "stop_line": 2527
  },
  {
    "code": 5008,
    "column": 12,
    "define": "flask.app.Flask.wsgi_app",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 2544,
    "name": "XSS",
    "path": "*",
    "stop_column": 15,
    "stop_line": 2544
  },
  {
    "code": 5008,
    "column": 27,
    "define": "app.definite_xss",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 45,
    "name": "XSS",
    "path": "app.py",
    "stop_column": 34,
    "stop_line": 45
  },
  {
    "code": 5008,
    "column": 13,
    "define": "app.open_redirect_tp",
    "description": "XSS [5008]: Data from [UserControlled] source(s) may reach [StringMayBeHTML] sink(s)",
    "line": 81,
    "name": "XSS",
    "path": "app.py",
    "stop_column": 20,
    "stop_line": 81
  },
  {
    "code": 5010,
    "column": 35,
    "define": "app.user_data_to_getattr_tp",
    "description": "User data to getattr [5010]: Attacker may control at least one argument to getattr(,).",
    "line": 66,
    "name": "User data to getattr",
    "path": "app.py",
    "stop_column": 42,
    "stop_line": 66
  },
  {
    "code": 5011,
    "column": 13,
    "define": "app.definite_pt",
    "description": "User data to filesystem operation (read/write) [5011]: Data from [UserControlled] source(s) may reach [FileSystem_ReadWrite] sink(s)",
    "line": 38,
    "name": "User data to filesystem operation (read/write)",
    "path": "app.py",
    "stop_column": 20,
    "stop_line": 38
  },
  {
    "code": 5011,
    "column": 14,
    "define": "app.user_data_to_filesystem_read_write_tp",
    "description": "User data to filesystem operation (read/write) [5011]: Data from [UserControlled] source(s) may reach [FileSystem_ReadWrite] sink(s)",
    "line": 75,
    "name": "User data to filesystem operation (read/write)",
    "path": "app.py",
    "stop_column": 21,
    "stop_line": 75
  },
  {
    "code": 5012,
    "column": 17,
    "define": "app.definite_ssrf",
    "description": "Potential Server-side request forgery (SSRF) [5012]: Data from [UserControlled] source(s) may reach [RequestSend_URI] sink(s)",
    "line": 57,
    "name": "Potential Server-side request forgery (SSRF)",
    "path": "app.py",
    "stop_column": 24,
    "stop_line": 57
  },
  {
    "code": 5018,
    "column": 40,
    "define": "flask.sessions.SecureCookieSessionInterface.save_session",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 380,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 43,
    "stop_line": 380
  },
  {
    "code": 5018,
    "column": 35,
    "define": "flask.app.Flask.__init__",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 708,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 39,
    "stop_line": 708
  },
  {
    "code": 5018,
    "column": 37,
    "define": "flask.app.Flask.full_dispatch_request",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 1826,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 39,
    "stop_line": 1826
  },
  {
    "code": 5018,
    "column": 37,
    "define": "flask.app.Flask.full_dispatch_request",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 1826,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 39,
    "stop_line": 1826
  },
  {
    "code": 5018,
    "column": 48,
    "define": "flask.app.Flask.process_response",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 2343,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 52,
    "stop_line": 2343
  },
  {
    "code": 5018,
    "column": 16,
    "define": "flask.app.Flask.wsgi_app",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 2527,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 19,
    "stop_line": 2527
  },
  {
    "code": 5018,
    "column": 12,
    "define": "flask.app.Flask.wsgi_app",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 2544,
    "name": "Open redirect",
    "path": "*",
    "stop_column": 15,
    "stop_line": 2544
  },
  {
    "code": 5018,
    "column": 13,
    "define": "app.open_redirect_tp",
    "description": "Open redirect [5018]: Data from [UserControlled] source(s) may be used in an open redirect via [Redirect] sink(s)",
    "line": 81,
    "name": "Open redirect",
    "path": "app.py",
    "stop_column": 20,
    "stop_line": 81
  },
  {
    "code": 5036,
    "column": 38,
    "define": "app.user_controlled_data_to_email_send_to_users_tp",
    "description": "User controlled data to email send to users [5036]: User controlled data is in emails being sent from server.",
    "line": 90,
    "name": "User controlled data to email send to users",
    "path": "app.py",
    "stop_column": 45,
    "stop_line": 90
  },
  {
    "code": 6064,
    "column": 35,
    "define": "app.user_data_to_getattr_tp",
    "description": "Environment variable or import injection may result in RCE [6064]: Data from [UserControlled] source(s) may reach [ExecImportSink] sink(s)",
    "line": 66,
    "name": "Environment variable or import injection may result in RCE",
    "path": "app.py",
    "stop_column": 42,
    "stop_line": 66
  },
  {
    "code": 6065,
    "column": 19,
    "define": "app.definite_rce",
    "description": "Commandline arguments injection may result in RCE [6065]: Data from [UserControlled] source(s) may reach [ExecArgSink] sink(s)",
    "line": 23,
    "name": "Commandline arguments injection may result in RCE",
    "path": "app.py",
    "stop_column": 26,
    "stop_line": 23
  },
  {
    "code": 6065,
    "column": 19,
    "define": "app.potential_rce_1",
    "description": "Commandline arguments injection may result in RCE [6065]: Data from [UserControlled] source(s) may reach [ExecArgSink] sink(s)",
    "line": 28,
    "name": "Commandline arguments injection may result in RCE",
    "path": "app.py",
    "stop_column": 36,
    "stop_line": 28
  },
  {
    "code": 6065,
    "column": 19,
    "define": "app.potential_rce_2",
    "description": "Commandline arguments injection may result in RCE [6065]: Data from [UserControlled] source(s) may reach [ExecArgSink] sink(s)",
    "line": 33,
    "name": "Commandline arguments injection may result in RCE",
    "path": "app.py",
    "stop_column": 36,
    "stop_line": 33
  },
  {
    "code": 6108,
    "column": 4,
    "define": "app.definite_pt",
    "description": "User Controlled file returned to user [6108]: User Controlled file returned to user",
    "line": 40,
    "name": "User Controlled file returned to user",
    "path": "app.py",
    "stop_column": 15,
    "stop_line": 40
  },
  {
    "code": 6108,
    "column": 4,
    "define": "app.user_data_to_filesystem_read_write_tp",
    "description": "User Controlled file returned to user [6108]: User Controlled file returned to user",
    "line": 77,
    "name": "User Controlled file returned to user",
    "path": "app.py",
    "stop_column": 15,
    "stop_line": 77
  },
  {
    "code": 6462,
    "column": 10,
    "define": "app.user_controlled_data_flows_into_url_like_string_tp",
    "description": "User-controlled data flows into URL-like string (potential SSRF) [6462]: Data from [UserControlled] source(s) may reach [StringMayBeURL] sink(s)",
    "line": 100,
    "name": "User-controlled data flows into URL-like string (potential SSRF)",
    "path": "app.py",
    "stop_column": 35,
    "stop_line": 100
  }
]
