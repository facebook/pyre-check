--- old-builtins.pyi	2021-10-05 15:51:43.411372422 -0700
+++ new-builtins.pyi	2021-10-05 16:05:45.642340020 -0700
@@ -61,6 +61,7 @@
     overload,
 )
 from typing_extensions import Literal, SupportsIndex, final
+from pyre_extensions import Add, Multiply, Divide
 
 if sys.version_info >= (3, 9):
     from types import GenericAlias
@@ -83,6 +84,8 @@
 _T5 = TypeVar("_T5")
 _TT = TypeVar("_TT", bound="type")
 _TBE = TypeVar("_TBE", bound="BaseException")
+N1 = TypeVar("N1", bound=int)
+N2 = TypeVar("N2", bound=int)
 
 class object:
     __doc__: str | None
@@ -196,10 +199,10 @@
     def from_bytes(
         cls, bytes: Iterable[SupportsIndex] | SupportsBytes, byteorder: Literal["little", "big"], *, signed: bool = ...
     ) -> int: ...  # TODO buffer object argument
-    def __add__(self, x: int) -> int: ...
-    def __sub__(self, x: int) -> int: ...
-    def __mul__(self, x: int) -> int: ...
-    def __floordiv__(self, x: int) -> int: ...
+    def __add__(self: N1, x: N2) -> Add[N1, N2]: ...
+    def __sub__(self: N1, x: N2) -> Add[N1, Multiply[Literal[-1], N2]]: ...
+    def __mul__(self: N1, x: N2) -> Multiply[N1, N2]: ...
+    def __floordiv__(self: N1, x: N2) -> Divide[N1, N2]: ...
     def __truediv__(self, x: int) -> float: ...
     def __mod__(self, x: int) -> int: ...
     def __divmod__(self, x: int) -> Tuple[int, int]: ...
@@ -367,7 +370,12 @@
     def isspace(self) -> bool: ...
     def istitle(self) -> bool: ...
     def isupper(self) -> bool: ...
+    
+    @overload
+    def join(self: Literal[str], __iterable: Iterable[Literal[str]]) -> Literal[str]: ...
+    @overload
     def join(self, __iterable: Iterable[str]) -> str: ...
+
     def ljust(self, __width: SupportsIndex, __fillchar: str = ...) -> str: ...
     def lower(self) -> str: ...
     def lstrip(self, __chars: str | None = ...) -> str: ...
@@ -399,7 +407,12 @@
     @staticmethod
     @overload
     def maketrans(__x: str, __y: str, __z: str | None = ...) -> dict[int, int | None]: ...
-    def __add__(self, s: str) -> str: ...
+
+    @overload
+    def __add__(self: Literal[str], other: Literal[str]) -> Literal[str]: ...
+    @overload
+    def __add__(self, other: str) -> str: ...
+
     # Incompatible with Sequence.__contains__
     def __contains__(self, o: str) -> bool: ...  # type: ignore
     def __eq__(self, x: object) -> bool: ...
