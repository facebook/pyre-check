@generated
{
  "kind": "issue",
  "data": {
    "callable":
      "class_flows.tainted_class_attribute_through_double_underscore_class_issue",
    "callable_line": 45,
    "code": 5002,
    "line": 46,
    "start": 4,
    "end": 39,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 46,
              "start": 42,
              "end": 56
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 46,
              "start": 4,
              "end": 39
            },
            "leaves": [
              {
                "kind": "Test",
                "name":
                  "Obj{class_flows.C.__class__.tainted_class_attribute}"
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable":
      "class_flows.tainted_class_attribute_through_optional_class_issue",
    "callable_line": 49,
    "code": 5002,
    "line": 53,
    "start": 8,
    "end": 44,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 53,
              "start": 47,
              "end": 61
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 53,
              "start": 8,
              "end": 44
            },
            "leaves": [
              {
                "kind": "Test",
                "name":
                  "Obj{class_flows.C.__class__.tainted_class_attribute}"
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.global_class_attribute_issue",
    "callable_line": 56,
    "code": 5002,
    "line": 57,
    "start": 4,
    "end": 29,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 57,
              "start": 32,
              "end": 46
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 57,
              "start": 4,
              "end": 29
            },
            "leaves": [
              {
                "kind": "Test",
                "name":
                  "Obj{class_flows.C.__class__.tainted_class_attribute}"
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.tainted_attribute_flow_issue",
    "callable_line": 21,
    "code": 5002,
    "line": 22,
    "start": 4,
    "end": 23,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 22,
              "start": 26,
              "end": 40
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 22,
              "start": 4,
              "end": 23
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "Obj{class_flows.C.tainted_attribute}"
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.tainted_attribute_through_inheritance_issue",
    "callable_line": 33,
    "code": 5002,
    "line": 34,
    "start": 4,
    "end": 23,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 34,
              "start": 26,
              "end": 40
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 34,
              "start": 4,
              "end": 23
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "Obj{class_flows.C.tainted_attribute}"
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.tainted_class_attribute_through_class_issue",
    "callable_line": 41,
    "code": 5002,
    "line": 42,
    "start": 4,
    "end": 40,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 42,
              "start": 43,
              "end": 57
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 42,
              "start": 4,
              "end": 40
            },
            "leaves": [
              {
                "kind": "Test",
                "name":
                  "Obj{class_flows.C.__class__.tainted_class_attribute}"
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.test",
    "callable_line": 78,
    "code": 5002,
    "line": 79,
    "start": 63,
    "end": 77,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 79,
              "start": 63,
              "end": 77
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "call": {
              "position": {
                "filename": "class_flows.py",
                "line": 79,
                "start": 63,
                "end": 77
              },
              "resolves_to": [
                "class_flows.HasClassmethods._async_results_for_non_empty_query_from_db"
              ],
              "port": "formal(locale)",
              "length": 2
            },
            "leaves": [ { "kind": "Test", "name": "_test_sink" } ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "features": [
      { "always-via": "special_source" },
      { "always-via": "special_sink" }
    ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.test_decorated_classmethod",
    "callable_line": 89,
    "code": 5002,
    "line": 90,
    "start": 36,
    "end": 50,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 90,
              "start": 36,
              "end": 50
            },
            "leaves": [ { "kind": "Test", "name": "_test_source" } ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "call": {
              "position": {
                "filename": "class_flows.py",
                "line": 90,
                "start": 36,
                "end": 50
              },
              "resolves_to": [
                "class_flows.HasDecoratedClassmethod.to_sink"
              ],
              "port": "formal(x)",
              "length": 1
            },
            "leaves": [ { "kind": "Test", "name": "_test_sink" } ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "features": [
      { "always-via": "special_source" },
      { "always-via": "special_sink" }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable":
      "class_flows.HasClassmethods._async_results_for_non_empty_query_from_db",
    "sinks": [
      {
        "port": "formal(locale)",
        "taint": [
          {
            "call": {
              "position": {
                "filename": "class_flows.py",
                "line": 66,
                "start": 49,
                "end": 55
              },
              "resolves_to": [
                "class_flows.HasClassmethods._get_multi_word_results"
              ],
              "port": "formal(locale)",
              "length": 1
            },
            "leaves": [ { "kind": "Test", "name": "_test_sink" } ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable": "Obj{class_flows.C.__class__.tainted_class_attribute}",
    "sinks": [
      {
        "port": "formal($global)",
        "taint": [ { "decl": null, "leaves": [ { "kind": "Test" } ] } ]
      }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable": "Obj{class_flows.C.tainted_attribute}",
    "sinks": [
      {
        "port": "formal($global)",
        "taint": [ { "decl": null, "leaves": [ { "kind": "Test" } ] } ]
      }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable": "class_flows.HasClassmethods._get_multi_word_results",
    "sinks": [
      {
        "port": "formal(locale)",
        "taint": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 70,
              "start": 19,
              "end": 25
            },
            "leaves": [ { "kind": "Test", "name": "_test_sink" } ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable": "class_flows.HasDecoratedClassmethod.to_sink",
    "sinks": [
      {
        "port": "formal(x)",
        "taint": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 86,
              "start": 19,
              "end": 20
            },
            "leaves": [ { "kind": "Test", "name": "_test_sink" } ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable": "list.append",
    "tito": [
      {
        "port": "formal(element)",
        "taint": [
          { "decl": null, "leaves": [ { "kind": "ParameterUpdate0" } ] }
        ]
      }
    ],
    "modes": [ "Obscure" ]
  }
}
