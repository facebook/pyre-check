def _test_sink(arg: TaintSink[Test]): ...
def list.append(self: TaintSink[Test1]): ...
def _test_source() -> TaintSource[Test]: ...

ModelQuery(
  name = "get_environ",
  find = "globals",
  where = [name.matches("environ")],
  model = [
    GlobalModel(TaintSource[Test]),
  ]
)

ModelQuery(
  name = "get_foo",
  find = "globals",
  where = [name.matches("foo")],
  model = [
    GlobalModel(TaintSource[Test1]),
  ]
)

ModelQuery(
  name = "get_Baz",
  find = "globals",
  where = [name.matches("Baz")],
  model = [
    GlobalModel(TaintSource[Test]),
  ]
)

ModelQuery(
  name = "get_hello_world",
  find = "globals",
  where = [
    AnyOf(
      type_annotation.equals("str"),
      type_annotation.equals("int"),
    ),
    fully_qualified_name.matches("model_query_global_variable.*")
  ],
  model = [
    GlobalModel(TaintSource[SelectIntAndStr]),
  ]
)

ModelQuery(
  name = "get_typed_dict",
  find = "globals",
  where = [type_annotation.equals("typing.Dict[str, model_query_global_variable.Baz]")],
  model = [
    GlobalModel(TaintSource[SelectDict]),
  ]
)

ModelQuery(
  name = "get_any_globals",
  find = "globals",
  where = [
    type_annotation.equals("typing.Any"),
    fully_qualified_name.matches("model_query_global_variable.*")
  ],
  model = [
    GlobalModel(TaintSource[SelectAny]),
  ]
)

ModelQuery(
  name = "get_any_functions",
  find = "functions",
  where = [
    return_annotation.matches("typing.Any"),
    fully_qualified_name.matches("model_query_global_variable.*")
  ],
  model = [
    Returns(TaintSource[SelectAny])
  ]
)

ModelQuery(
  name = "get_callables",
  find = "globals",
  where = [
    type_annotation.equals("typing.Callable[[int, str], int]"),
  ],
  model = [
    GlobalModel(TaintSource[SelectCallable])
  ]
)
