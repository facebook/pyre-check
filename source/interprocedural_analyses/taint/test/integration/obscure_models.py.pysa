def _test_sink(arg: TaintSink[Test]): ...
def _test_source() -> TaintSource[Test]: ...

@SkipOverrides
def obscure_models.C.obscure_with_skip_overrides(self, x, y): ...

@IgnoreDecorator
def obscure_models.C.obscure_with_skip_inlining(self, x, y): ...

def obscure_models.C.obscure_with_source(self, x, y) -> TaintSource[UserControlled]: ...

@SkipObscure
def obscure_models.C.obscure_with_skip_obscure(self, x, y): ...

@SkipObscure
def obscure_models.C.obscure_with_skip_obscure_and_tito(self, x, y: TaintInTaintOut[LocalReturn]): ...

@SkipObscure
def obscure_models.C.obscure_with_multiple_models(self, x, y): ...
def obscure_models.C.obscure_with_multiple_models(self, x, y: TaintInTaintOut[LocalReturn]): ...

def obscure_models.C.obscure_with_tito(self, x: TaintInTaintOut[Via[a_feature]]): ...

ModelQuery(
  name = "skip_obscure_model_query",
  find = "functions",
  where = [name.equals("test_skip_obscure_via_model_query")],
  model = [
    Parameters(TaintInTaintOut),
    Modes([SkipObscure])
  ]
)

@Obscure
def obscure_models.obscure_from_model(): ...
