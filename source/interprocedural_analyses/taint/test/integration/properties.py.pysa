def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

@my_property.setter
def properties.TaintedGetterAndSetter.my_property(self, value: TaintInTaintOut[Updates[self], Via[string_concat_lhs]]): ...

@property
def properties.TaintedGetterAndSetter.my_property(self) -> TaintSource[Test]: ...
@my_property.setter
def properties.TaintedGetterAndSetter.my_property(self: TaintSource[Test], value): ...

@__classproperty__
def properties.ClassProperty.my_class_property(cls) -> TaintSource[Test, Via[string_concat_lhs]]: ...

# Using TaintInTaintOut[LocalReturn] on property setters is equivalent to TaintInTaintOut[Updates[self]]
@my_property.setter
def properties.PropertySetterTitoModel.my_property(self, value: TaintInTaintOut[LocalReturn]): ...

@SkipObscure
@Sanitize
@property
def object.__class__(): ...
