# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

from __future__ import annotations

import abc
from abc import abstractmethod
from typing import Any, Optional

class MySQLConnectionAbstract(metaclass=abc.ABCMeta):
    converter: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    @property
    def user(self): ...
    @property
    def server_host(self): ...
    @property
    def server_port(self): ...
    @property
    def unix_socket(self): ...
    @property
    @abc.abstractmethod
    def database(self) -> MySQLConnectionAbstract: ...
    @database.setter
    def database(self, value: Any) -> MySQLConnectionAbstract: ...
    @property
    def can_consume_results(self): ...
    def config(self, **kwargs: Any) -> None: ...
    def get_server_version(self): ...
    def get_server_info(self): ...
    @property
    @abc.abstractmethod
    def in_transaction(self) -> Any: ...
    def set_client_flags(self, flags: Any): ...
    def isset_client_flag(self, flag: Any): ...
    @property
    def time_zone(self): ...
    @time_zone.setter
    def time_zone(self, value: Any) -> None: ...
    @property
    def sql_mode(self): ...
    @sql_mode.setter
    def sql_mode(self, value: Any) -> None: ...
    @abstractmethod
    def info_query(self, query: Any) -> MySQLCursorAbstract: ...
    def set_login(
        self, username: Optional[Any] = ..., password: Optional[Any] = ...
    ) -> None: ...
    def set_unicode(self, value: bool = ...) -> None: ...
    @property
    def autocommit(self): ...
    @autocommit.setter
    def autocommit(self, value: Any) -> None: ...
    @property
    def get_warnings(self): ...
    @get_warnings.setter
    def get_warnings(self, value: Any) -> None: ...
    @property
    def raise_on_warnings(self): ...
    @raise_on_warnings.setter
    def raise_on_warnings(self, value: Any) -> None: ...
    @property
    def unread_result(self) -> bool: ...
    @unread_result.setter
    def unread_result(self, value: bool): ...
    @property
    def charset(self): ...
    @property
    def python_charset(self): ...
    def set_charset_collation(
        self, charset: Optional[Any] = ..., collation: Optional[Any] = ...
    ) -> None: ...
    @property
    def collation(self): ...
    @abstractmethod
    def disconnect(self) -> Any: ...
    close: Any = ...
    def connect(self, **kwargs: Any) -> MySQLConnectionAbstract: ...
    def reconnect(self, attempts: int = ..., delay: int = ...) -> None: ...
    @abstractmethod
    def is_connected(self) -> Any: ...
    @abstractmethod
    def ping(
        self, reconnect: bool = ..., attempts: int = ..., delay: int = ...
    ) -> Any: ...
    @abstractmethod
    def commit(self) -> Any: ...
    @abstractmethod
    def cursor(
        self,
        buffered: Optional[Any] = ...,
        raw: Optional[Any] = ...,
        prepared: Optional[Any] = ...,
        cursor_class: Optional[Any] = ...,
        dictionary: Optional[Any] = ...,
        named_tuple: Optional[Any] = ...,
    ) -> MySQLCursorAbstract: ...
    @abstractmethod
    def rollback(self) -> Any: ...
    def start_transaction(
        self,
        consistent_snapshot: bool = ...,
        isolation_level: Optional[Any] = ...,
        readonly: Optional[Any] = ...,
    ) -> None: ...
    def reset_session(
        self,
        user_variables: Optional[Any] = ...,
        session_variables: Optional[Any] = ...,
    ) -> None: ...
    def set_converter_class(self, convclass: Any) -> None: ...
    @abstractmethod
    def get_rows(
        self,
        count: Optional[Any] = ...,
        binary: bool = ...,
        columns: Optional[Any] = ...,
    ) -> Any: ...
    def cmd_init_db(self, database: Any) -> None: ...
    def cmd_query(
        self,
        query: Any,
        raw: bool = ...,
        buffered: bool = ...,
        raw_as_string: bool = ...,
    ) -> None: ...
    def cmd_query_iter(self, statements: Any) -> None: ...
    def cmd_refresh(self, options: Any) -> None: ...
    def cmd_quit(self) -> None: ...
    def cmd_shutdown(self, shutdown_type: Optional[Any] = ...) -> None: ...
    def cmd_statistics(self) -> None: ...
    def cmd_process_info(self) -> None: ...
    def cmd_process_kill(self, mysql_pid: Any) -> None: ...
    def cmd_debug(self) -> None: ...
    def cmd_ping(self) -> None: ...
    def cmd_change_user(
        self,
        username: str = ...,
        password: str = ...,
        database: str = ...,
        charset: int = ...,
    ) -> None: ...
    def cmd_stmt_prepare(self, statement: Any) -> None: ...
    def cmd_stmt_execute(
        self,
        statement_id: Any,
        data: Any = ...,
        parameters: Any = ...,
        flags: int = ...,
    ) -> None: ...
    def cmd_stmt_close(self, statement_id: Any) -> None: ...
    def cmd_stmt_send_long_data(
        self, statement_id: Any, param_id: Any, data: Any
    ) -> None: ...
    def cmd_stmt_reset(self, statement_id: Any) -> None: ...
    def cmd_reset_connection(self) -> None: ...

class MySQLCursorAbstract(metaclass=abc.ABCMeta):
    arraysize: int = ...
    def __init__(self) -> None: ...
    @abstractmethod
    def callproc(self, procname: Any, args: Any = ...) -> Any: ...
    @abstractmethod
    def close(self) -> Any: ...
    @abstractmethod
    def execute(self, operation: Any, params: Any = ..., multi: bool = ...) -> Any: ...
    @abstractmethod
    def executemany(self, operation: Any, seqparams: Any) -> Any: ...
    @abstractmethod
    def fetchone(self) -> Any: ...
    @abstractmethod
    def fetchmany(self, size: int = ...) -> Any: ...
    @abstractmethod
    def fetchall(self) -> Any: ...
    def nextset(self) -> None: ...
    def setinputsizes(self, sizes: Any) -> None: ...
    def setoutputsize(self, size: Any, column: Optional[Any] = ...) -> None: ...
    def reset(self, free: bool = ...) -> None: ...
    @property
    @abc.abstractmethod
    def description(self) -> Any: ...
    @property
    @abc.abstractmethod
    def rowcount(self) -> Any: ...
    @property
    @abc.abstractmethod
    def lastrowid(self) -> Any: ...
    def fetchwarnings(self): ...
