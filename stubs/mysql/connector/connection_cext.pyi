# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

from __future__ import annotations

from typing import Any, Optional

from mysql.connector.abstracts import (
    MySQLConnectionAbstract as MySQLConnectionAbstract,
    MySQLCursorAbstract as MySQLCursorAbstract,
)

HAVE_CMYSQL: bool

class CMySQLConnection(MySQLConnectionAbstract):
    converter: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def set_unicode(self, value: bool = ...) -> None: ...
    @property
    def autocommit(self): ...
    @autocommit.setter
    def autocommit(self, value: Any) -> None: ...
    @property
    def database(self) -> CMySQLConnection: ...
    @database.setter
    def database(self, value: Any) -> CMySQLConnection: ...
    @property
    def in_transaction(self): ...
    def close(self) -> None: ...
    disconnect: Any = ...
    def is_connected(self): ...
    def ping(
        self, reconnect: bool = ..., attempts: int = ..., delay: int = ...
    ) -> None: ...
    def set_character_set_name(self, charset: Any) -> None: ...
    def info_query(self, query: Any): ...
    @property
    def connection_id(self): ...
    def get_rows(
        self,
        count: Optional[Any] = ...,
        binary: bool = ...,
        columns: Optional[Any] = ...,
    ): ...
    def get_row(self, binary: bool = ..., columns: Optional[Any] = ...): ...
    def next_result(self): ...
    def free_result(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def cmd_init_db(self, database: Any) -> None: ...
    def fetch_eof_columns(self): ...
    def fetch_eof_status(self): ...
    def cmd_query(
        self,
        query: Any,
        raw: bool = ...,
        buffered: bool = ...,
        raw_as_string: bool = ...,
    ): ...
    def cursor(
        self,
        buffered: Optional[Any] = ...,
        raw: Optional[Any] = ...,
        prepared: Optional[Any] = ...,
        cursor_class: Optional[Any] = ...,
        dictionary: Optional[Any] = ...,
        named_tuple: Optional[Any] = ...,
    ) -> MySQLCursorAbstract: ...
    @property
    def num_rows(self): ...
    @property
    def warning_count(self): ...
    @property
    def result_set_available(self): ...
    @property
    def unread_result(self) -> bool: ...
    @property
    def more_results(self): ...
    def prepare_for_mysql(self, params: Any): ...
    def consume_results(self) -> None: ...
    def cmd_change_user(
        self,
        username: str = ...,
        password: str = ...,
        database: str = ...,
        charset: int = ...,
    ) -> None: ...
    def cmd_refresh(self, options: Any): ...
    def cmd_quit(self) -> None: ...
    def cmd_shutdown(self, shutdown_type: Optional[Any] = ...) -> None: ...
    def cmd_statistics(self): ...
    def cmd_process_kill(self, mysql_pid: Any) -> None: ...
    def handle_unread_result(self) -> None: ...
