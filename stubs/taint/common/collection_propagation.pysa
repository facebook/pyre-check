# Dictionary propagation

# Unfortunately, we need to collapse for dict.__init__ since it accepts iterables, not just other dictionaries.
@SkipObscure
def dict.__init__(self, map: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], Collapse], /): ...
def dict.__init__(self, map: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.keys()], NoCollapse], /): ...
def dict.__init__(self, **kwargs: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def dict.__new__(): ...

@SkipObscure
def collections.defaultdict.__init__(self, default_factory: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse], /): ...
def collections.defaultdict.__init__(self, default_factory, map: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], Collapse], /): ...
def collections.defaultdict.__init__(self, default_factory, map: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.keys()], NoCollapse], /): ...
def collections.defaultdict.__init__(self, **kwargs: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def dict.__getitem__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], k, /): ...
@SkipObscure
def typing.Mapping.__getitem__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], k, /): ...

@SkipObscure
def dict.__setitem__(
    self,
    k: TaintInTaintOut[Updates[self], UpdatePath[_.keys()], NoCollapse],
    v: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.MutableMapping.__setitem__(
    self,
    k: TaintInTaintOut[Updates[self], UpdatePath[_.keys()], NoCollapse],
    v: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def typing.MutableMapping.setdefault(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    key: TaintInTaintOut[Updates[self], UpdatePath[_.keys()], NoCollapse],
    default: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
    /,
): ...
def typing.MutableMapping.setdefault(self, key, default: TaintInTaintOut[LocalReturn, NoCollapse], /): ...
@SkipObscure
def collections.OrderedDict.setdefault(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    key: TaintInTaintOut[Updates[self], UpdatePath[_.keys()], NoCollapse],
    default: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
): ...
def collections.OrderedDict.setdefault(self, key, default: TaintInTaintOut[LocalReturn, NoCollapse]): ...

# Unfortunately, we need to collapse for dict.update since it accepts iterables, not just other dictionaries.
@SkipObscure
def typing.MutableMapping.update(self, m: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], Collapse], /): ...
def typing.MutableMapping.update(self, m: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.keys()], NoCollapse], /): ...
def typing.MutableMapping.update(self, **kwargs: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def dict.get(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    key,
    default: TaintInTaintOut[LocalReturn, NoCollapse],
    /,
): ...
@SkipObscure
def typing.Mapping.get(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    key,
    /,
    default: TaintInTaintOut[LocalReturn, NoCollapse],
): ...

@SkipObscure
def dict.items(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()[0]], NoCollapse]): ...
def dict.items(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()[1]], NoCollapse]): ...
@SkipObscure
def typing.Mapping.items(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()[0]], NoCollapse]): ...
def typing.Mapping.items(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()[1]], NoCollapse]): ...
@SkipObscure
def collections.OrderedDict.items(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()[0]], NoCollapse]): ...
def collections.OrderedDict.items(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()[1]], NoCollapse]): ...

@SkipObscure
def dict.keys(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse]): ...
@SkipObscure
def typing.Mapping.keys(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.OrderedDict.keys(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse]): ...

@SkipObscure
def dict.values(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse]): ...
@SkipObscure
def typing.Mapping.values(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.OrderedDict.values(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse]): ...

@SkipObscure
def dict.copy(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...
@SkipObscure
def collections.OrderedDict.copy(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...
@SkipObscure
def collections.defaultdict.copy(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...

@SkipObscure
def dict.pop(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableMapping.pop(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], /): ...

@SkipObscure
def collections.OrderedDict.popitem(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_[1]], NoCollapse]): ...
def collections.OrderedDict.popitem(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_[0]], NoCollapse]): ...

@SkipObscure
def dict.__iter__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], NoCollapse]): ...

# Sequence propagation

@SkipObscure
def list.__init__(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def list.__init__(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...
@SkipObscure
def collections.deque.__init__(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], maxlen): ...
def collections.deque.__init__(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], maxlen): ...

@SkipObscure
def tuple.__new__(cls, iterable: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse], /): ...
def tuple.__new__(cls, iterable: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse], /): ...

@SkipObscure
def list.append(self, object: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableSequence.append(self, value: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.deque.append(self, x: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def list.extend(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def list.extend(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableSequence.extend(self, values: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse]): ...
def typing.MutableSequence.extend(self, values: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.deque.extend(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def collections.deque.extend(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def list.insert(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    index,
    object: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
    /
): ...
@SkipObscure
def typing.MutableSequence.insert(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    index,
    value: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
): ...
@SkipObscure
def collections.deque.insert(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    i,
    x: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def list.__setitem__(self, index, element: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableSequence.__setitem__(self, index, value: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.deque.__setitem__(self, s, o: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def list.__getitem__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], s, /): ...
@SkipObscure
def tuple.__getitem__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], s, /): ...
@SkipObscure
def typing.Sequence.__getitem__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], index): ...
@SkipObscure
def collections.deque.__getitem__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], s, /): ...

@SkipObscure
def list.__add__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    x: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def tuple.__add__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    x: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def list.__iadd__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    x: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def list.__iadd__(
    self,
    x: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.MutableSequence.__iadd__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    values: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse]
): ...
def typing.MutableSequence.__iadd__(
    self,
    values: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse]
): ...
@SkipObscure
def collections.deque.__iadd__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    x: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def collections.deque.__iadd__(
    self,
    x: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def list.__mul__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    n: TaintInTaintOut[LocalReturn, Collapse],
    /,
): ...
@SkipObscure
def tuple.__mul__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    n: TaintInTaintOut[LocalReturn, Collapse],
    /,
): ...

@SkipObscure
def list.__rmul__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    n: TaintInTaintOut[LocalReturn, Collapse],
    /,
): ...
@SkipObscure
def tuple.__rmul__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    n: TaintInTaintOut[LocalReturn, Collapse],
    /,
): ...

@SkipObscure
def list.__imul__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    n: TaintInTaintOut[LocalReturn, Collapse],
    /,
): ...
def list.__imul__(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    n: TaintInTaintOut[Updates[self], Collapse],
    /,
): ...
@SkipObscure
def collections.deque.__imul__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    n: TaintInTaintOut[LocalReturn, Collapse],
    /,
): ...
def collections.deque.__imul__(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    n: TaintInTaintOut[Updates[self], Collapse],
    /,
): ...

@SkipObscure
def list.pop(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableSequence.pop(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.deque.pop(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...

@SkipObscure
def collections.deque.popleft(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
def collections.deque.popleft(self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def list.remove(self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableSequence.remove(self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse]): ...
@SkipObscure
def collections.deque.remove(self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def list.sort(self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def typing.MutableSequence.reverse(self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def collections.deque.appendleft(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    x: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def collections.deque.extendleft(
    self: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    iterable: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def list.copy(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...

@SkipObscure
def list.__iter__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
@SkipObscure
def tuple.__iter__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
@SkipObscure
def typing.Sequence.__iter__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...

# Set propagation

@SkipObscure
def set.__init__(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def set.__init__(self, iterable: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def frozenset.__new__(cls, iterable: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse], /): ...
def frozenset.__new__(cls, iterable: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse], /): ...

@SkipObscure
def set.add(self, element: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse], /): ...
@SkipObscure
def typing.MutableSet.add(self, value: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def set.update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def set.update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def set.difference_update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def set.difference_update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def set.intersection_update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def set.intersection_update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def set.symmetric_difference_update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse], /): ...
def set.symmetric_difference_update(self, s: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.all()], NoCollapse], /): ...

@SkipObscure
def set.intersection(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.intersection(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def frozenset.intersection(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def frozenset.intersection(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__and__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.AbstractSet.__and__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    other: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
@SkipObscure
def frozenset.__and__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__iand__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.__iand__(
    self,
    s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.MutableSet.__iand__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    it: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
def typing.MutableSet.__iand__(
    self,
    it: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
): ...

@SkipObscure
def set.union(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.union(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def frozenset.union(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def frozenset.union(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__or__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.AbstractSet.__or__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    other: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
@SkipObscure
def frozenset.__or__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__ior__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.__ior__(
    self,
    s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.MutableSet.__ior__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    it: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
def typing.MutableSet.__ior__(
    self,
    it: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
): ...

@SkipObscure
def set.__xor__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def frozenset.__xor__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__ixor__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.__ixor__(
    self,
    s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.MutableSet.__ixor__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    it: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
def typing.MutableSet.__ixor__(
    self,
    it: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
): ...

@SkipObscure
def set.difference(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.difference(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def frozenset.difference(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def frozenset.difference(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__sub__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.AbstractSet.__sub__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    other: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
@SkipObscure
def frozenset.__sub__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def set.__isub__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.__isub__(
    self,
    s: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def typing.MutableSet.__isub__(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    it: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
): ...
def typing.MutableSet.__isub__(
    self,
    it: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], NoCollapse],
): ...

@SkipObscure
def set.symmetric_difference(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def set.symmetric_difference(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
@SkipObscure
def frozenset.symmetric_difference(
    self: TaintInTaintOut[LocalReturn, NoCollapse],
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], ReturnPath[_.all()], NoCollapse],
    /,
): ...
def frozenset.symmetric_difference(
    self,
    s: TaintInTaintOut[LocalReturn, ParameterPath[_.keys()], ReturnPath[_.all()], NoCollapse],
    /,
): ...

@SkipObscure
def typing.MutableSet.pop(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...

@SkipObscure
def set.copy(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...
@SkipObscure
def frozenset.copy(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...

@SkipObscure
def set.remove(self: TaintInTaintOut[LocalReturn, NoCollapse], /): ...
@SkipObscure
def typing.MutableSet.remove(self: TaintInTaintOut[LocalReturn, NoCollapse]): ...

@SkipObscure
def set.discard(self: TaintInTaintOut[LocalReturn, NoCollapse], /): ...

@SkipObscure
def set.__iter__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
@SkipObscure
def frozenset.__iter__(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...

# Queue propagation
@SkipObscure
def queue.Queue.put(self, item: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...
@SkipObscure
def queue.Queue.put_nowait(self, item: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...
@SkipObscure
def queue.Queue.get(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
@SkipObscure
def queue.Queue.get_nowait(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse]): ...
