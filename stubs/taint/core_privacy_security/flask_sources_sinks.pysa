# flask.Request sources

werkzeug.wrappers.BaseRequest.path: TaintSource[UserControlled, UserControlled_Meta, URL] = ...
werkzeug.wrappers.BaseRequest.full_path: TaintSource[UserControlled, UserControlled_Meta, URL] = ...
werkzeug.wrappers.BaseRequest.url: TaintSource[UserControlled, UserControlled_Meta, URL] = ...
werkzeug.wrappers.BaseRequest.base_url: TaintSource[UserControlled, UserControlled_Meta, URL] = ...

@property
def werkzeug.wrappers.BaseRequest.cookies(self) -> TaintSource[UserControlled, UserControlled_Meta, Cookies]: ...
werkzeug.wrappers.BaseRequest.method: TaintSource[UserControlled, UserControlled_Meta] = ...
werkzeug.wrappers.BaseRequest.headers: TaintSource[UserControlled, UserControlled_Meta, HeaderData] = ...
@property
def werkzeug.wrappers.CommonRequestDescriptorsMixin.content_type(self) -> TaintSource[UserControlled, UserControlled_Meta]: ...
@property
def werkzeug.wrappers.CommonRequestDescriptorsMixin.referrer(self) -> TaintSource[UserControlled, UserControlled_Meta, HeaderData]: ...
@property
def werkzeug.wrappers.UserAgentMixin.user_agent(self) -> TaintSource[UserControlled, UserControlled_Meta]: ...
def werkzeug.datastructures.Headers.get(self, key, type) -> TaintSource[UserControlled, UserControlled_Meta, HeaderData]: ...

flask.wrappers.Request.view_args: TaintSource[UserControlled, UserControlled_Payload] = ...
werkzeug.wrappers.BaseRequest.args: TaintSource[UserControlled, UserControlled_Payload] = ...
werkzeug.wrappers.BaseRequest.query_string: TaintSource[UserControlled, UserControlled_Payload] = ...
@property
def werkzeug.wrappers.BaseRequest.data(self) -> TaintSource[UserControlled, UserControlled_Payload]: ...
werkzeug.wrappers.BaseRequest.form: TaintSource[UserControlled, UserControlled_Payload] = ...
werkzeug.wrappers.BaseRequest.values: TaintSource[UserControlled, UserControlled_Payload] = ...
werkzeug.wrappers.BaseRequest.files: TaintSource[UserControlled, UserControlled_Payload] = ...
def werkzeug.wrappers.BaseRequest.get_data(self, cache, as_text, parse_form_data) -> TaintSource[UserControlled, UserControlled_Payload]: ...
def flask.wrappers.JSONMixin.get_json(self) -> TaintSource[UserControlled, UserControlled_Payload]: ...

# flask.Response sources
def werkzeug.wrappers.BaseResponse.get_data(self) -> TaintSource[ResponseData]: ...
werkzeug.wrappers.CommonResponseDescriptorsMixin.location: TaintSource[URL] = ...

# Sessions
flask.globals.session: TaintSource[UserControlled] = ...

# Sinks
def werkzeug.utils.redirect(location: TaintSink[Redirect], code, Response): ...
def flask.helpers.send_file(
    filename_or_fp: TaintSink[FileSystem_ReadWrite],
    mimetype,
    as_attachment,
    attachment_filename,
    add_etags,
    cache_timeout,
    conditional,
    last_modified,
): ...
# methods for constructing a response
def werkzeug.wrappers.BaseResponse.__init__(
	self,
	response: TaintSink[ReturnedToUser, XSS],
	headers: TaintSink[ReturnedToUser, ResponseHeaderName, ResponseHeaderValue]
): ...
def werkzeug.wrappers.BaseResponse.set_data(
	self,
	value: TaintSink[ReturnedToUser, XSS]
): ...
def werkzeug.wrappers.BaseResponse.set_cookie(
	self,
	key: TaintSink[ReturnedToUser],
	value: TaintSink[ReturnedToUser]
): ...

def flask.helpers.make_response(*args: TaintSink[ReturnedToUser, XSS]): ...
def flask.json.jsonify(*args: TaintSink[ReturnedToUser], **kwargs: TaintSink[ReturnedToUser]): ...
def flask.templating.render_template(
	template_name_or_list,
	**context: TaintSink[ReturnedToUser]
): ...
def flask.templating.render_template_string(
	source: TaintSink[ReturnedToUser, XSS, ServerSideTemplateInjection],
	**context: TaintSink[ReturnedToUser]
): ...


ModelQuery(
  find = "functions",
  where = [
    Decorator(name.matches("app.route")),
  ],
  model = [
    Parameters(TaintSource[UserControlled, UserControlled_Parameter]),
    Returns(TaintSink[ReturnedToUser])
  ]
)

ModelQuery(
  find = "functions",
  where = [
    Decorator(name.matches("app.errorhandler")),
  ],
  model = [
    Returns(TaintSink[ReturnedToUser])
  ]
)
