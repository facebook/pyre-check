# String features
@SkipObscure
def str.__add__(self: TaintInTaintOut[LocalReturn, Via[string_concat_lhs]], s: TaintInTaintOut[Via[string_concat_rhs]]): ...

# XML sinks
def xml.etree.ElementTree.parse(source: TaintSink[XMLParser], parser): ...
def xml.etree.ElementTree.iterparse(source: TaintSink[XMLParser], events, parser): ...
def xml.etree.ElementTree.XML(text: TaintSink[XMLParser], parser): ...
def xml.etree.ElementTree.XMLParser.feed(self, __data: TaintSink[XMLParser]): ...
def xml.dom.minidom.parse(file: TaintSink[XMLParser], parser, bufsize): ...
def xml.dom.minidom.parseString(string: TaintSink[XMLParser], parser): ...
def xml.dom.pulldom.parse(stream_or_string: TaintSink[XMLParser]): ...
def xml.dom.pulldom.parseString(string: TaintSink[XMLParser]): ...

# GetAttr
@SkipObscure
def getattr(
    __o: TaintInTaintOut[Via[getattr]],
    name: TaintSink[GetAttr],
    __default: TaintInTaintOut[LocalReturn],
): ...

@SkipObscure
def io.BytesIO.__init__(self, initial_bytes: TaintInTaintOut[Via[bytesio]]): ...

@SkipObscure
def hmac.new(key: TaintInTaintOut[Via[hmac_key]], msg, digestmod): ...

@SkipObscure
def str.count(self: TaintInTaintOut[LocalReturn, Via[benign]], x, __start, __end): ...

@property
@SkipObscure
def object.__class__(self: TaintInTaintOut[Via[benign]]): ...
object.__doc__: TaintInTaintOut[Via[benign]] = ...
type.__name__: TaintInTaintOut[Via[benign]] = ...

@SkipObscure
def object.__new__(cls: TaintInTaintOut): ...
@SkipObscure
def urllib.parse.quote_plus(string: TaintInTaintOut[LocalReturn, Via[urllib_quote_plus]], safe, encoding, errors): ...

# Exceptions
def BaseException.__str__() -> TaintSource[ExceptionMessage, ViaTypeOf[self]]: ...
def BaseException.__repr__() -> TaintSource[ExceptionMessage, ViaTypeOf[self]]: ...

# Command line arguments
def argparse.ArgumentParser.parse_args() -> TaintSource[CLIUserControlled]: ...
