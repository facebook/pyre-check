# RCE sinks
def eval(__source: TaintSink[RemoteCodeExecution], __globals, __locals): ...
def exec(__object: TaintSink[RemoteCodeExecution], __globals, __locals): ...
def importlib.import_module(name: TaintSink[ExecImportSink], package): ...
def __import__(
  name: TaintSink[ExecImportSink],
  globals,
  locals,
  fromlist,
  level,
): ...
def pickle.loads(
  data: TaintSink[ExecDeserializationSink],
  /,
  *,
  fix_imports,
  encoding,
  errors,
  buffers,
): ...
def pickle.load(
    file: TaintSink[ExecDeserializationSink],
    *,
    fix_imports,
    encoding,
    errors,
    buffers,
  ): ...
def pickle.Unpickler.__init__(
    self,
    file: TaintSink[ExecDeserializationSink],
    fix_imports,
    encoding,
    errors
): ...
def yaml.load(
  stream: TaintSink[ExecDeserializationSink],
  Loader,
): ...
def yaml.load_all(stream: TaintSink[ExecDeserializationSink], Loader): ...
# Subprocess
def subprocess.run(
    args: TaintSink[ExecArgSink, ViaTypeOf[args], ViaValueOf[shell, WithTag["shell"]]],
    bufsize: TaintSink[RemoteCodeExecution],
    executable: TaintSink[ExecArgSink],
    stdin,
    stdout,
    stderr,
    preexec_fn: TaintSink[RemoteCodeExecution],
    close_fds: TaintSink[RemoteCodeExecution],
    shell,
    cwd: TaintSink[ExecArgSink],
    env: TaintSink[ExecEnvSink],
    universal_newlines,
    startupinfo,
    creationflags,
    restore_signals,
    start_new_session,
    pass_fds,
    *,
    capture_output,
    check,
    encoding,
    errors,
    input: TaintSink[ExecArgSink],
    text,
    timeout,
): ...

def subprocess.call(
  args: TaintSink[ExecArgSink, ViaTypeOf[args], ViaValueOf[shell, WithTag["shell"]]],
  bufsize: TaintSink[RemoteCodeExecution],
  executable: TaintSink[ExecArgSink],
  stdin,
  stdout,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds: TaintSink[RemoteCodeExecution],
  shell,
  cwd: TaintSink[ExecArgSink],
  env: TaintSink[ExecEnvSink],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  timeout,
): ...

def subprocess.check_call(
  args: TaintSink[ExecArgSink, ViaTypeOf[args], ViaValueOf[shell, WithTag["shell"]]],
  bufsize: TaintSink[RemoteCodeExecution],
  executable: TaintSink[ExecArgSink],
  stdin: TaintSink[RemoteCodeExecution],
  stdout,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds: TaintSink[RemoteCodeExecution],
  shell,
  cwd: TaintSink[ExecArgSink],
  env: TaintSink[ExecEnvSink],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  timeout,
): ...

def subprocess.check_output(
  args: TaintSink[ExecArgSink, ViaTypeOf[args], ViaValueOf[shell, WithTag["shell"]]],
  bufsize: TaintSink[RemoteCodeExecution],
  executable: TaintSink[ExecArgSink],
  stdin,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds: TaintSink[RemoteCodeExecution],
  shell,
  cwd: TaintSink[ExecArgSink],
  env: TaintSink[ExecEnvSink],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  *,
  timeout,
  input: TaintSink[ExecArgSink],
  encoding,
  errors,
  text,
 ): ...

def subprocess.getstatusoutput(cmd: TaintSink[RemoteCodeExecution, ViaTypeOf[cmd]]): ...

def subprocess.getoutput(cmd: TaintSink[RemoteCodeExecution, ViaTypeOf[cmd]]): ...

def subprocess.Popen.__new__(
  cls,
  args: TaintSink[ExecArgSink, ViaTypeOf[args], ViaValueOf[shell, WithTag["shell"]]],
  bufsize,
  executable: TaintSink[ExecArgSink],
  stdin,
  stdout,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution], close_fds,
  shell,
  cwd: TaintSink[ExecArgSink],
  env: TaintSink[ExecEnvSink],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  *,
  encoding,
  errors
): ...

# Asyncio
async def asyncio.subprocess.create_subprocess_exec(
    program: TaintSink[ExecArgSink, ViaTypeOf[program]],
    *args: TaintSink[ExecArgSink],
    stdin = ...,
    stdout = ...,
    stderr = ...,
    loop = ...,
    limit = ...,
    universal_newlines = ...,
    shell = ...,
    bufsize = ...,
    encoding = ...,
    errors = ...,
    text = ...,
    executable = ...,
    preexec_fn = ...,
    close_fds = ...,
    cwd = ...,
    env = ...,
    startupinfo = ...,
    creationflags = ...,
    restore_signals = ...,
    start_new_session = ...,
    pass_fds = ...,
): ...

async def asyncio.subprocess.create_subprocess_shell(
    cmd: TaintSink[RemoteCodeExecution],
    stdin = ...,
    stdout = ...,
    stderr = ...,
    loop = ...,
    limit = ...,
    universal_newlines = ...,
    shell = ...,
    bufsize = ...,
    encoding = ...,
    errors = ...,
    text = ...,
    executable = ...,
    preexec_fn = ...,
    close_fds = ...,
    cwd = ...,
    env = ...,
    startupinfo = ...,
    creationflags = ...,
    restore_signals = ...,
    start_new_session = ...,
    pass_fds = ...,
): ...
# Lower level API (eventloop module: https://docs.python.org/3/library/asyncio-eventloop.html)
def asyncio.events.AbstractEventLoop.subprocess_exec(*, *args: TaintSink[ExecArgSink], **kwargs: TaintSink[ExecArgSink]): ...
def asyncio.events.AbstractEventLoop.subprocess_shell(cmd: TaintSink[RemoteCodeExecution], *, **kwargs: TaintSink[ExecArgSink]): ...


# os module
def os.execl(file: TaintSink[ExecArgSink], __arg0, *args: TaintSink[ExecArgSink]): ...
def os.execle(file: TaintSink[ExecArgSink], __arg0, *args): ...
def os.execlp(file: TaintSink[ExecArgSink], __arg0, *args): ...
def os.execlpe(file: TaintSink[ExecArgSink], __arg0,*args): ...
def os.execv(__path: TaintSink[ExecArgSink], __argv: TaintSink[ExecArgSink]): ...
def os.execve(path: TaintSink[ExecArgSink], argv: TaintSink[ExecArgSink], env: TaintSink[ExecEnvSink]): ...
def os.execvp(file: TaintSink[ExecArgSink], args: TaintSink[ExecArgSink]): ...
def os.execvpe(file: TaintSink[ExecArgSink], args: TaintSink[ExecArgSink], env: TaintSink[ExecEnvSink]): ...
def os.popen(cmd: TaintSink[RemoteCodeExecution], mode, buffering):...
def os.spawnl(mode, file: TaintSink[ExecArgSink], arg0, *args: TaintSink[ExecArgSink]): ...
def os.spawnle(mode, file: TaintSink[ExecArgSink], arg0, *args: TaintSink[ExecArgSink]): ...
def os.spawnlp(mode, file: TaintSink[ExecArgSink], arg0, *args: TaintSink[ExecArgSink]): ...
def os.spawnlpe(mode, file: TaintSink[ExecArgSink], arg0, *args: TaintSink[ExecArgSink]): ...
def os.spawnv(mode, file: TaintSink[ExecArgSink], args: TaintSink[ExecArgSink]): ...
def os.spawnve(mode, file: TaintSink[ExecArgSink], args: TaintSink[ExecArgSink], env: TaintSink[ExecEnvSink]): ...
def os.spawnvp(mode, file: TaintSink[ExecArgSink], args: TaintSink[ExecArgSink]): ...
def os.spawnvpe(file: TaintSink[ExecArgSink], args: TaintSink[ExecArgSink], env: TaintSink[ExecEnvSink]): ...
def os.system(command: TaintSink[RemoteCodeExecution]): ...

# marshaling
def marshal.loads(__bytes: TaintSink[ExecDeserializationSink]): ...
def marshal.load(__file: TaintSink[FileSystem_Other]): ...

# shelve library https://docs.python.org/3/library/shelve.html
def shelve.open(filename: TaintSink[ExecDeserializationSink], flag, protocol, writeback): ...

# Features https://docs.python.org/3/library/shlex.html#shlex.quote
@SkipObscure
def shlex.quote(s: TaintInTaintOut[Via[shell_escape]]): ...

# Code module (https://docs.python.org/3/library/code.html)
def code.compile_command(source: TaintSink[RemoteCodeExecution], filename: TaintSink[RemoteCodeExecution]): ...
def code.InteractiveInterpreter.runsource(source: TaintSink[RemoteCodeExecution], filename: TaintSink[RemoteCodeExecution]): ...
def code.InteractiveInterpreter.runcode(code: TaintSink[RemoteCodeExecution]): ...
def code.InteractiveConsole.push(line: TaintSink[RemoteCodeExecution]): ...
