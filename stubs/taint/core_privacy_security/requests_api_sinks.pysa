# SSRF [requests.api]
def requests.api.request(
        method: TaintSink[RequestSend_METADATA],
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.api.get(
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.api.options(
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.api.head(
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.api.post(
        url: TaintSink[RequestSend_URI],
        data: TaintSink[RequestSend_DATA] = ...,
        json: TaintSink[RequestSend_DATA] = ...,
        params: TaintSink[RequestSend_DATA],
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
): ...
def requests.api.put(
        url: TaintSink[RequestSend_URI],
        data: TaintSink[RequestSend_DATA] = ...,
        params: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.api.patch(
        url: TaintSink[RequestSend_URI],
        data: TaintSink[RequestSend_DATA] = ...,
        params: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.api.delete(
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...

# SSRF [requests.Session]
def requests.sessions.Session.get(
        self,
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.sessions.Session.options(
        self,
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.sessions.Session.head(
        self,
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.sessions.Session.post(
        self,
        url: TaintSink[RequestSend_URI],
        data: TaintSink[RequestSend_DATA] = ...,
        json: TaintSink[RequestSend_DATA] = ...,
        params: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
): ...
def requests.sessions.Session.put(
        self,
        url: TaintSink[RequestSend_URI],
        data: TaintSink[RequestSend_DATA] = ...,
        params: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.sessions.Session.patch(
        self,
        url: TaintSink[RequestSend_URI],
        data: TaintSink[RequestSend_DATA] = ...,
        params: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.sessions.Session.delete(
        self,
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...
def requests.sessions.Session.request(
        self,
        method: TaintSink[RequestSend_METADATA],
        url: TaintSink[RequestSend_URI],
        params: TaintSink[RequestSend_DATA] = ...,
        data: TaintSink[RequestSend_DATA] = ...,
        headers: TaintSink[RequestSend_METADATA] = ...,
        cookies: TaintSink[RequestSend_METADATA] = ...,
        files = ...,
        auth: TaintSink[RequestSend_METADATA, Authentication] = ...,
        timeout: TaintSink[RequestSend_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[RequestSend_METADATA] = ...,
        hooks: TaintSink[RequestSend_METADATA] = ...,
        stream: TaintSink[RequestSend_METADATA] = ...,
        verify: TaintSink[RequestSend_METADATA] = ...,
        cert = ...,
        json: TaintSink[RequestSend_DATA] = ...,
): ...

# Authentication sinks
def requests.models.Request.__init__(auth: TaintSink[Authentication] = ...): ...
def requests.models.PreparedRequest.prepare(auth: TaintSink[Authentication] = ...): ...

# SSRF [urllib.request]
def urllib.request.urlopen(url: TaintSink[RequestSend_URI], data: TaintSink[RequestSend_DATA],
                           timeout, *, cafile, capath,
                           cadefault, context): ...
def urllib.request.urlretrieve(url: TaintSink[RequestSend_URI], filename, reporthook, data: TaintSink[RequestSend_DATA] ): ...
def urllib.request.URLopener.open(self, fullurl: TaintSink[RequestSend_URI], data: TaintSink[RequestSend_DATA] ): ...
def urllib.request.URLopener.open_unknown(self, fullurl: TaintSink[RequestSend_URI], data: TaintSink[RequestSend_DATA]): ...
def urllib.request.URLopener.retrieve(self, url: TaintSink[RequestSend_URI], filename, reporthook, data: TaintSink[RequestSend_DATA]): ...
@SkipObscure
def urllib.parse.urlencode(query: TaintInTaintOut[Via[urlencode]], doseq, safe, encoding, errors, quote_via): ...
@SkipObscure
def urllib.parse.quote(string: TaintInTaintOut[Via[urlencode]], safe, safe, encoding, errors): ...
@SkipObscure
def urllib.parse.quote_plus(string: TaintInTaintOut[Via[urlencode]], safe, safe, encoding, errors): ...

# SSRF [http.client]
def http.client.HTTPConnection.__init__(self,
                                        host: TaintSink[RequestSend_URI],
                                        port: TaintSink[RequestSend_METADATA],
                                        timeout: TaintSink[RequestSend_METADATA],
                                        source_address,
                                        blocksize
                                       ): ...
def http.client.HTTPSConnection.__init__(self,
                                         host: TaintSink[RequestSend_URI],
                                         port: TaintSink[RequestSend_METADATA],
                                         key_file: TaintSink[RequestSend_METADATA],
                                         cert_file: TaintSink[RequestSend_METADATA],
                                         timeout: TaintSink[RequestSend_METADATA],
                                         source_address,
                                         *,
                                         context,
                                         check_hostname
                                        ): ...
def http.client.HTTPConnection.request(self,
                                       method: TaintSink[RequestSend_METADATA],
                                       url: TaintSink[RequestSend_URI],
                                       body: TaintSink[RequestSend_DATA],
                                       headers: TaintSink[RequestSend_METADATA],
                                       *,
                                       encode_chunked
                                      ): ...
def http.client.HTTPConnection.set_tunnel(self,
                                          host: TaintSink[RequestSend_URI],
                                          port: TaintSink[RequestSend_METADATA],
                                          headers: TaintSink[RequestSend_METADATA]
                                         ): ...
def http.client.HTTPConnection.putrequest(self,
                                          method: TaintSink[RequestSend_METADATA],
                                          url: TaintSink[RequestSend_URI],
                                          skip_host,
                                          skip_accept_encoding
                                         ): ...
def http.client.HTTPConnection.putheader(self,
                                         header: TaintSink[RequestSend_METADATA],
                                         *argument: TaintSink[RequestSend_DATA]
                                        ): ...

# socket
def socket.create_connection(address: TaintSink[RequestSend_URI], timeout, source_address): ...
def _socket.socket.connect(self, __address: TaintSink[RequestSend_URI]): ...
def _socket.socket.connect_ex(self, __address: TaintSink[RequestSend_URI]): ...
def _socket.socket.send(self, __data: TaintSink[RequestSend_DATA], __flags): ...
def _socket.socket.sendall(self, __data: TaintSink[RequestSend_DATA], __flags): ...

# pycurl
def pycurl.Curl.setopt(self, option, value: TaintSink[RequestSend_URI, RequestSend_METADATA, RequestSend_DATA, ViaValueOf[option]]): ...
