# SSRF [requests.api]

# We also sanitize ServerSecrets on requests APIs. A common pattern is the secret is used as part
# of request headers, parameters, etc. However, the response after sending the authenticated
# request usually does not contain secrets.
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.request(
        method: TaintSink[HTTPClientRequest_METADATA],
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.request(
        method: AttachToTito[Via[http_query], Via[external_query]],
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.get(
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.get(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.options(
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.options(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.head(
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.head(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.post(
        url: TaintSink[HTTPClientRequest_URI],
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
        params: TaintSink[HTTPClientRequest_DATA],
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.post(
        url: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.put(
        url: TaintSink[HTTPClientRequest_URI],
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.put(
        url: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.patch(
        url: TaintSink[HTTPClientRequest_URI],
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.patch(
        url: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.api.delete(
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.api.delete(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
# SSRF [requests.Session]

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.get(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.get(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.options(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.options(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.head(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.head(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.post(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.post(
        url: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.put(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.put(
        url: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.patch(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.patch(
        url: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.delete(
        self,
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.delete(
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def requests.sessions.Session.request(
        self,
        method: TaintSink[HTTPClientRequest_METADATA],
        url: TaintSink[HTTPClientRequest_URI],
        params: TaintSink[HTTPClientRequest_DATA] = ...,
        data: TaintSink[HTTPClientRequest_DATA] = ...,
        headers: TaintSink[HTTPClientRequest_METADATA] = ...,
        cookies: TaintSink[HTTPClientRequest_METADATA] = ...,
        files = ...,
        auth: TaintSink[HTTPClientRequest_METADATA, Authentication] = ...,
        timeout: TaintSink[HTTPClientRequest_METADATA] = ...,
        allow_redirects = ...,
        proxies: TaintSink[HTTPClientRequest_METADATA] = ...,
        hooks: TaintSink[HTTPClientRequest_METADATA] = ...,
        stream: TaintSink[HTTPClientRequest_METADATA] = ...,
        verify: TaintSink[HTTPClientRequest_METADATA] = ...,
        cert = ...,
        json: TaintSink[HTTPClientRequest_DATA] = ...,
) -> TaintSource[DataFromInternet]: ...
def requests.sessions.Session.request(
        method: AttachToTito[Via[http_query], Via[external_query]],
        url: AttachToTito[Via[http_query], Via[external_query]],
        params: AttachToTito[Via[http_query], Via[external_query]],
        data: AttachToTito[Via[http_query], Via[external_query]],
        headers: AttachToTito[Via[http_query], Via[external_query]],
        cookies: AttachToTito[Via[http_query], Via[external_query]],
        timeout: AttachToTito[Via[http_query], Via[external_query]],
        proxies: AttachToTito[Via[http_query], Via[external_query]],
        hooks: AttachToTito[Via[http_query], Via[external_query]],
        stream: AttachToTito[Via[http_query], Via[external_query]],
        json: AttachToTito[Via[http_query], Via[external_query]],
): ...

# Authentication sinks
def requests.models.Request.__init__(self, auth: TaintSink[Authentication] = ...): ...
def requests.models.PreparedRequest.prepare(auth: TaintSink[Authentication] = ...): ...

# SSRF [urllib.request]
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def urllib.request.urlopen(url: TaintSink[HTTPClientRequest_URI], data: TaintSink[HTTPClientRequest_DATA]) -> TaintSource[DataFromInternet]: ...
def urllib.request.urlopen(url: AttachToTito[Via[http_query], Via[external_query]], data: AttachToTito[Via[http_query], Via[external_query]]): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def urllib.request.urlretrieve(url: TaintSink[HTTPClientRequest_URI], filename, reporthook, data: TaintSink[HTTPClientRequest_DATA] ) -> TaintSource[DataFromInternet]: ...
def urllib.request.urlretrieve(url: AttachToTito[Via[http_query], Via[external_query]], data: AttachToTito[Via[http_query], Via[external_query]] ): ...

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def urllib.request.URLopener.open(self, fullurl: TaintSink[HTTPClientRequest_URI], data: TaintSink[HTTPClientRequest_DATA] ) -> TaintSource[DataFromInternet]: ...
def urllib.request.URLopener.open(fullurl: AttachToTito[Via[http_query], Via[external_query]], data: AttachToTito[Via[http_query], Via[external_query]] ): ...

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def urllib.request.URLopener.open_unknown(self, fullurl: TaintSink[HTTPClientRequest_URI], data: TaintSink[HTTPClientRequest_DATA]) -> TaintSource[DataFromInternet]: ...
def urllib.request.URLopener.open_unknown(fullurl: AttachToTito[Via[http_query], Via[external_query]], data: AttachToTito[Via[http_query], Via[external_query]]): ...

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def urllib.request.URLopener.retrieve(self, url: TaintSink[HTTPClientRequest_URI], filename, reporthook, data: TaintSink[HTTPClientRequest_DATA]) -> TaintSource[DataFromInternet]: ...
def urllib.request.URLopener.retrieve(url: AttachToTito[Via[http_query], Via[external_query]], data: AttachToTito[Via[http_query], Via[external_query]]): ...

@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
@SkipObscure
def urllib.parse.urlencode(query: TaintInTaintOut[Via[urlencode]], doseq, safe, encoding, errors, quote_via): ...
@SkipObscure
def urllib.parse.quote(string: TaintInTaintOut[Via[urlencode]], safe, encoding, errors): ...
@SkipObscure
def urllib.parse.quote_plus(string: TaintInTaintOut[Via[urlencode], Via[urllib_quote_plus]], safe, encoding, errors): ...

# SSRF [http.client]
def http.client.HTTPConnection.__init__(self,
                                        host: TaintSink[HTTPClientRequest_URI],
                                        port: TaintSink[HTTPClientRequest_METADATA],
                                        timeout: TaintSink[HTTPClientRequest_METADATA],
                                        source_address,
                                        blocksize
                                       ): ...
if sys.version >= (3, 12, 0):
    def http.client.HTTPSConnection.__init__(self,
                                             host: TaintSink[HTTPClientRequest_URI],
                                             port: TaintSink[HTTPClientRequest_METADATA],
                                             *,
                                             timeout: TaintSink[HTTPClientRequest_METADATA],
                                             source_address,
                                             context,
                                             blocksize
                                            ): ...
else:
    def http.client.HTTPSConnection.__init__(self,
                                             host: TaintSink[HTTPClientRequest_URI],
                                             port: TaintSink[HTTPClientRequest_METADATA],
                                             key_file: TaintSink[HTTPClientRequest_METADATA],
                                             cert_file: TaintSink[HTTPClientRequest_METADATA],
                                             timeout: TaintSink[HTTPClientRequest_METADATA],
                                             source_address,
                                             *,
                                             context,
                                             check_hostname
                                            ): ...

def http.client.HTTPConnection.request(self,
                                       method: TaintSink[HTTPClientRequest_METADATA],
                                       url: TaintSink[HTTPClientRequest_URI],
                                       body: TaintSink[HTTPClientRequest_DATA],
                                       headers: TaintSink[HTTPClientRequest_METADATA],
                                       *,
                                       encode_chunked
                                      ): ...
def http.client.HTTPConnection.request(method: AttachToTito[Via[http_query], Via[external_query]],
                                       url: AttachToTito[Via[http_query], Via[external_query]],
                                       body: AttachToTito[Via[http_query], Via[external_query]],
                                       headers: AttachToTito[Via[http_query], Via[external_query]]
                                      ): ...
def http.client.HTTPConnection.set_tunnel(self,
                                          host: TaintSink[HTTPClientRequest_URI],
                                          port: TaintSink[HTTPClientRequest_METADATA],
                                          headers: TaintSink[HTTPClientRequest_METADATA]
                                         ): ...
def http.client.HTTPConnection.putrequest(self,
                                          method: TaintSink[HTTPClientRequest_METADATA],
                                          url: TaintSink[HTTPClientRequest_URI],
                                          skip_host,
                                          skip_accept_encoding
                                         ): ...
def http.client.HTTPConnection.putrequest(method: AttachToTito[Via[http_query], Via[external_query]],
                                          url: AttachToTito[Via[http_query], Via[external_query]]
                                         ): ...
def http.client.HTTPConnection.putheader(self,
                                         header: TaintSink[HTTPClientRequest_METADATA],
                                         *argument: TaintSink[HTTPClientRequest_DATA]
                                        ): ...
@Sanitize(TaintInTaintOut[TaintSource[ServerSecrets]])
def http.client.HTTPConnection.getresponse() -> TaintSource[DataFromInternet]: ...

# socket
def socket.create_connection(address: TaintSink[HTTPClientRequest_URI], timeout, source_address): ...
def _socket.socket.connect(self, address: TaintSink[HTTPClientRequest_URI], /): ...
def _socket.socket.connect_ex(self, address: TaintSink[HTTPClientRequest_URI], /): ...
def _socket.socket.send(self, data: TaintSink[HTTPClientRequest_DATA], flags, /): ...
def _socket.socket.sendall(self, data: TaintSink[HTTPClientRequest_DATA], flags, /): ...

# pycurl
def pycurl.Curl.setopt(self, option, value: TaintSink[HTTPClientRequest_URI, HTTPClientRequest_METADATA, HTTPClientRequest_DATA, ViaValueOf[option]]): ...
