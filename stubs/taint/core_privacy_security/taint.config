{
  "comment": "UserControlled, Test, Demo sources are predefined. Same for Demo, Test and RemoteCodeExecution sinks",
  "features": [
    {
      "comment": "via a string created by tainted_str + 's'",
      "name": "string_concat_lhs"
    },
    {
      "comment": "via a string created by 's' + tainted_str",
      "name": "string_concat_rhs"
    },
    {
      "comment": "via getattr first parameter",
      "name": "getattr"
    },
    {
      "comment": "via django request.FILES",
      "name": "request_files"
    },
    {
      "comment": "via io.BytesIO object",
      "name": "bytesio"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a query param",
      "name": "furl_query_params"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a path",
      "name": "furl_path"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a fragment",
      "name": "furl_fragment"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a scheme",
      "name": "furl_scheme"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a host",
      "name": "furl_host"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a port",
      "name": "furl_port"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a network location",
      "name": "furl_netloc"
    },
    {
      "comment": "Indicates taint passed through furl.furl as an origin",
      "name": "furl_origin"
    },
    {
      "comment": "Indicates taint passed through furl.furl as a url",
      "name": "furl_url"
    },
    {
      "comment": "Indicates a taint passed through the 'urllib.quote_plus' function",
      "name": "urllib_quote_plus"
    },
    {
      "comment": "Indicates a taint passed through a function that escapes data for embedding in HTML documents",
      "name": "escape_html"
    },
    {
      "comment": "Indicates taint passed through the HMAC algorithm as a key.",
      "name": "hmac_key"
    },
    {
      "comment": "Indicates flow passed through conversion to 'bool'.",
      "name": "boolean"
    },
    {
      "comment": "Indicates a flow going to requests APIs kwargs (body, query_string), usually is not SSRF. It is a code smell",
      "name": "requests_metadata"
    },
    {
      "comment": "Indicates that the flow is usually code smell and does not have a direct security or privacy impact",
      "name": "code_smell"
    },
    {
      "comment": "Indicates that this flow passed through some external query (GraphQL, Database, etc.), and thus might not reflect the original tainted data anymore",
      "name": "external_query"
    },
    {
      "comment": "Indicates that this flow passed through a query of a Django Model object, and thus might not reflect the original tainted data anymore",
      "name": "django_model_query"
    },
    {
      "comment": "Indicates that data was transformed in some way that likely renders it benign (conversion to bool, length take, uncontrollable attributes like __name__ accessed)",
      "name": "benign"
    },
    {
      "comment": "Indicates that data in this flow passed through a type constructor",
      "name": "type"
    },
    {
      "comment": "Indicates taint passed through the 'len()' built-in function",
      "name": "len"
    },
    {
      "comment": "Indicates taint passed through a function producing a shell escaped string example shlex.quote",
      "name": "shell_escape"
    },
    {
      "comment": "Indicates taint passed through a function that does URL encoding usually to protect from SSRF",
      "name": "urlencode"
    },
    {
      "comment": "Indicates a known false positive for rule 6306",
      "name": "known_false_positive_6306"
    },
    {
      "comment": "Indicates that this flow passed through a SQL query, and thus might not reflect the original tainted data anymore",
      "name": "sql_query"
    },
    {
      "comment": "Indicates that this flow passed through a Thrift query, and thus might not reflect the original tainted data anymore",
      "name": "thrift_query"
    },
    {
      "comment": "Indicates that this flow passed through a Filesystem operation, and thus might not reflect the original tainted data anymore",
      "name": "filesystem_operation"
    }
  ],
  "implicit_sinks": {
    "literal_strings": [
      {
        "description": "Indicates a string which may be HTML.",
        "kind": "StringMayBeHTML",
        "regexp": "<.*?>"
      },
      {
        "description": "Indicates a string which may be an SQL query.",
        "kind": "StringMayBeSQL",
        "regexp": "^\\s*(UPDATE|(?i)INSERT INTO|SELECT|DELETE)\\s+.*?"
      },
      {
        "description": "Indicates a string which may be a URL.",
        "kind": "StringMayBeURL",
        "regexp": "^(?i)https?://\\S+"
      }
    ]
  },
  "implicit_sources": {
    "literal_strings": [
      {
        "description": "Indicates a string which may be an Amazon AWS access key.",
        "kind": "AWSAccessKey",
        "regexp": "AKIA[0-9A-Z]{16}"
      },
      {
        "description": "Indicates a string which may be a Google API key.",
        "kind": "GoogleAPIKey",
        "regexp": "AIza[0-9A-Za-z\\-_]{35}"
      }
    ]
  },
  "rules": [
    {
      "code": 5001,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Possible shell injection",
      "sinks": [
        "RemoteCodeExecution"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5002,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Test flow",
      "sinks": [
        "Test"
      ],
      "sources": [
        "Test",
        "UserControlled"
      ]
    },
    {
      "code": 5005,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "SQL injection.",
      "sinks": [
        "SQL",
        "StringMayBeSQL"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5007,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "User data to XML Parser.",
      "sinks": [
        "XMLParser"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5008,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "XSS",
      "sinks": [
        "XSS",
        "StringMayBeHTML"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5009,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Demo flow",
      "sinks": [
        "Demo"
      ],
      "sources": [
        "Demo"
      ]
    },
    {
      "code": 5010,
      "message_format": "Attacker may control at least one argument to getattr(,).",
      "name": "User data to getattr",
      "sinks": [
        "GetAttr"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5011,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "User data to filesystem operation (read/write)",
      "sinks": [
        "FileSystem_ReadWrite"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5012,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Potential Server-side request forgery (SSRF)",
      "sinks": [
        "RequestSend",
        "RequestSend_URI",
        "RequestSend_METADATA",
        "RequestSend_DATA"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5018,
      "message_format": "Data from [{$sources}] source(s) may be used in an open redirect via [{$sinks}] sink(s)",
      "name": "Open redirect",
      "sinks": [
        "Redirect"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5027,
      "message_format": "Server secrets such as keys and access tokens are being returned to users",
      "name": "Server secrets reach exit",
      "sinks": [
        "ReturnedToUser",
        "ThriftReturn"
      ],
      "sources": [
        "ServerSecrets"
      ]
    },
    {
      "code": 5029,
      "message_format": "User controlled data is used to set headers on a response",
      "name": "User controlled response headers",
      "sinks": [
        "ResponseHeaderName",
        "ResponseHeaderValue"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5034,
      "message_format": "User controlled string is being formatted which may leak globally accessible data",
      "name": "User controlled string formatting",
      "sinks": [
        "FormatString"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5036,
      "message_format": "User controlled data is in emails being sent from server.",
      "name": "User controlled data to email send to users",
      "sinks": [
        "EmailSend"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 5041,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Possible shell injection via command line arguments",
      "sinks": [
        "RemoteCodeExecution"
      ],
      "sources": [
        "CLIUserControlled"
      ]
    },
    {
      "code": 6060,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "User-controlled data flows into filesystem API (other)",
      "sinks": [
        "FileSystem_Other"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6064,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Environment variable or import injection may result in RCE",
      "sinks": [
        "ExecEnvSink",
        "ExecImportSink"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6065,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Commandline arguments injection may result in RCE",
      "sinks": [
        "ExecArgSink"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6066,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Unsafe deserialization may result in RCE",
      "sinks": [
        "ExecDeserializationSink"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6073,
      "message_format": "User controlled data may eventually flow into a Server Side Template Injection sink",
      "name": "Potential Server Side Template Injection",
      "sinks": [
        "ServerSideTemplateInjection"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6074,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Hardcoded credentials may be used to authenticate requests",
      "sinks": [
        "Authentication",
        "RequestSend_DATA",
        "RequestSend_URI"
      ],
      "sources": [
        "AWSAccessKey",
        "GoogleAPIKey"
      ]
    },
    {
      "code": 6302,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Exception message is returned to the user",
      "sinks": [
        "ReturnedToUser"
      ],
      "sources": [
        "ExceptionMessage"
      ]
    },
    {
      "code": 6303,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "Potential LDAP injection",
      "sinks": [
        "LDAPInjection"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6306,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "User-controlled data flows into Thrift configuration",
      "sinks": [
        "ThriftConfiguration"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
      "code": 6462,
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
      "name": "User-controlled data flows into URL-like string (potential SSRF)",
      "sinks": [
        "StringMayBeURL"
      ],
      "sources": [
        "UserControlled"
      ]
    },
    {
        "code": 5301,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "Possible shell injection",
        "sinks": [
          "RemoteCodeExecution"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5305,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "SQL injection.",
        "sinks": [
          "SQL",
          "StringMayBeSQL"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5307,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "User data to XML Parser.",
        "sinks": [
          "XMLParser"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5308,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "XSS",
        "sinks": [
          "XSS",
          "StringMayBeHTML"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5311,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "User data to filesystem operation (read/write)",
        "sinks": [
          "FileSystem_ReadWrite"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5360,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "User-controlled data flows into filesystem API (other)",
        "sinks": [
          "FileSystem_Other"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5364,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "Environment variable or import injection may result in RCE",
        "sinks": [
          "ExecEnvSink",
          "ExecImportSink"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5365,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "Commandline arguments injection may result in RCE",
        "sinks": [
          "ExecArgSink"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5366,
        "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)",
        "name": "Unsafe deserialization may result in RCE",
        "sinks": [
          "ExecDeserializationSink"
        ],
        "sources": [
          "DataFromInternet"
        ]
      },
      {
        "code": 5373,
        "message_format": "User controlled data may eventually flow into a Server Side Template Injection sink",
        "name": "Potential Server Side Template Injection",
        "sinks": [
          "ServerSideTemplateInjection"
        ],
        "sources": [
          "DataFromInternet"
        ]
      }
  ],
  "sinks": [
    {
      "comment": "demo sink",
      "name": "Demo"
    },
    {
      "comment": "test sink",
      "name": "Test"
    },
    {
      "comment": "use to annotate where data flows into file system APIs that may allow read/write to an arbitrary file",
      "name": "FileSystem_ReadWrite"
    },
    {
      "comment": "use to annotate file systems APIs that do not allow direct read/write (e.g removing a file or renaming a file)",
      "name": "FileSystem_Other"
    },
    {
      "comment": "used to annotate `getattr` function",
      "name": "GetAttr"
    },
    {
      "comment": "use to annotate where data is logged",
      "name": "Logging"
    },
    {
      "comment": "use to annotate where data influences a redirect sent to the user",
      "name": "Redirect"
    },
    {
      "comment": "use to annotate where inputs can directly lead to code execution",
      "name": "RemoteCodeExecution"
    },
    {
      "comment": "use to annotate where inputs flow into the environment variables",
      "name": "ExecEnvSink"
    },
    {
      "comment": "use to annotate where inputs flow into the command line arguments",
      "name": "ExecArgSink"
    },
    {
      "comment": "use to annotate where inputs flow into unsafe deserialization functions",
      "name": "ExecDeserializationSink"
    },
    {
      "comment": "use to annotate where inputs flow into import functions",
      "name": "ExecImportSink"
    },
    {
      "comment": "use to annotate where data influences request sending",
      "name": "RequestSend"
    },
    {
      "comment": "use to annotate the URI of a request being sent",
      "name": "RequestSend_URI"
    },
    {
      "comment": "use to annotate the meta data of a request being sent (e.g method, port, headers, cookies)",
      "name": "RequestSend_METADATA"
    },
    {
      "comment": "use to annotate the locations of data being sent in a request (post body, query params)",
      "name": "RequestSend_DATA"
    },
    {
      "comment": "use to annotate locations where data is returned to users",
      "name": "ReturnedToUser"
    },
    {
      "comment": "use to annotate locations where header names are set on responses",
      "name": "ResponseHeaderName"
    },
    {
      "comment": "use to annotate locations where header values are set on responses",
      "name": "ResponseHeaderValue"
    },
    {
      "comment": "use to annotate places of SQL injection risk",
      "name": "SQL"
    },
    {
      "comment": "use to annotate where data is parsed for XML",
      "name": "XMLParser"
    },
    {
      "comment": "use to annotate where data can cause XSS",
      "name": "XSS"
    },
    {
      "comment": "used to annotate locations of MemCache",
      "name": "MemcacheSink"
    },
    {
      "comment": "used to annotate locations where data enters a persistent data store",
      "name": "DataStorage"
    },
    {
      "comment": "used to annotate locations where data is included in emails sent",
      "name": "EmailSend"
    },
    {
      "comment": "used to annotate where strings get formatted",
      "name": "FormatString"
    },
    {
      "comment": "used to annotate locations of Server Side Template Injection risk",
      "name": "ServerSideTemplateInjection"
    },
    {
      "comment": "used to annotate locations where we return data from thrift",
      "name": "ThriftReturn"
    },
    {
      "comment": "used to annotate locations where f-string looks like HTML",
      "name": "StringMayBeHTML"
    },
    {
      "comment": "used to annotate locations where f-string looks like SQL statement",
      "name": "StringMayBeSQL"
    },
    {
      "comment": "used to annotate where credentials are supplied to a request",
      "name": "Authentication"
    },
    {
      "comment": "used to annotate locations of LDAP injection risk",
      "name": "LDAPInjection"
    },
    {
      "comment": "used to annotate information used to configure and construct Thrift instances.",
      "name": "ThriftConfiguration"
    },
    {
      "comment": "used to annotate locations where string looks like a URL.",
      "name": "StringMayBeURL"
    }
  ],
  "sources": [
    {
      "comment": "used to annotate cookie sources",
      "name": "Cookies"
    },
    {
      "comment": "demo source",
      "name": "Demo"
    },
    {
      "comment": "use to annotate passwords, tokens, etc.",
      "name": "UserSecrets"
    },
    {
      "comment": "use to annotate user data",
      "name": "UserData"
    },
    {
      "comment": "use to annotate all data that is controllable by the user making a request",
      "name": "UserControlled"
    },
    {
      "comment": "use to annotate data that is an entire payload from user requests (eg. GET/POST payloads)",
      "name": "UserControlled_Payload"
    },
    {
      "comment": "use to annotate data that an individual parametr from user requests (eg. a single URL param)",
      "name": "UserControlled_Parameter"
    },
    {
      "comment": "use to annotate metadata that comes with a user's request, but is not explicitly part of the payload (headers, cookies, etc)",
      "name": "UserControlled_Meta"
    },
    {
      "comment": "use to annotate the payload that is returned in response to a user's request",
      "name": "ResponseData"
    },
    {
      "comment": "test source",
      "name": "Test"
    },
    {
      "comment": "use to annotate signing keys, access tokens, and other server secrets",
      "name": "ServerSecrets"
    },
    {
      "comment": "use to annotate headers, which may contain data that should be treated carefully",
      "name": "HeaderData"
    },
    {
      "comment": "use to annotate whole or partial URLs",
      "name": "URL"
    },
    {
      "comment": "used to annotate locations of MemCache",
      "name": "MemCache"
    },
    {
      "comment": "Used to annotate data that comes from a GET request.",
      "name": "DataFromGET"
    },
    {
      "comment": "Used to annotate data that comes from a POST request.",
      "name": "DataFromPOST"
    },
    {
      "comment": "Used to annotate data that may or may not come from a GET request.",
      "name": "MaybeDataFromGET"
    },
    {
      "comment": "Used to annotate data that may or may not come from a POST request.",
      "name": "MaybeDataFromPOST"
    },
    {
      "comment": "used to annotate raw exception messages, which could contain sensitive application details.",
      "name": "ExceptionMessage"
    },
    {
      "comment": "used to annotate command line arguments, which could be user-controlled.",
      "name": "CLIUserControlled"
    },
    {
      "comment": "used to annotate an Amazon AWS access key.",
      "name": "AWSAccessKey"
    },
    {
      "comment": "used to annotate a Google API key.",
      "name": "GoogleAPIKey"
    },
    {
      "comment": "use to annotate data returned by an HTTP request",
      "name": "DataFromInternet"
    }
  ]
}
