# Filesystem Sinks
def open(file: TaintSink[FileSystem], mode, buffering, encoding, errors, newline, closefd): ...
def os.remove(path: TaintSink[FileSystem], *, dir_fd=...): ...
def os.open(path: TaintSink[FileSystem], flags, mode, *, dir_fd): ...
def os.mkdir(path: TaintSink[FileSystem], mode, *, dir_fd): ...
def os.makedirs(name: TaintSink[FileSystem], mode, exist_ok): ...
def os.rename(src: TaintSink[FileSystem], dst:TaintSink[FileSystem], *, src_dir_fd, dst_dir_fd): ...
def os.rmdir(path: TaintSink[FileSystem], *, dir_fd): ...
def os.walk(top: TaintSink[FileSystem], topdown, onerror, followlinks): ...
def os.chmod(path: TaintSink[FileSystem], mode, *, dir_fd, follow_symlinks): ...
def os.chown(path: TaintSink[FileSystem], uid, gid, *, dir_fd, follow_symlinks): ...
def os.lchown(path: TaintSink[FileSystem], uid, gid): ...
def os.access(path: TaintSink[FileSystem], mode, *, dir_fd, effective_ids, follow_symlinks): ...
def os.chflags(path: TaintSink[FileSystem], flags, follow_symlinks): ...
def os.lchflags(path: TaintSink[FileSystem], flags): ...
def os.lchmod(path: TaintSink[FileSystem], mode): ...
def os.link(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, src_dir_fd: TaintSink[FileSystem], dst_dir_fd: TaintSink[FileSystem], follow_symlinks): ...
def os.truncate(path: TaintSink[FileSystem], length): ...
def os.utime(path: TaintSink[FileSystem], times, *, ns, dir_fd, follow_symlinks): ...
def os.chdir(path: TaintSink[FileSystem]): ...
def os.chroot(path: TaintSink[FileSystem]): ...
def os.putenv(__name: TaintSink[FileSystem], __value: TaintSink[FileSystem]): ...
def os.unsetenv(__name: TaintSink[FileSystem]): ...
def os.removedirs(name: TaintSink[FileSystem]): ...
def os.renames(old: TaintSink[FileSystem], new: TaintSink[FileSystem]): ...
def os.replace(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, src_dir_fd, dst_dir_fd): ...
def os.unlink(path: TaintSink[FileSystem], *, dir_fd): ...
def os.fwalk(top: TaintSink[FileSystem], topdown, onerror, *, follow_symlinks, dir_fd): ...
def os.removexattr(path: TaintSink[FileSystem], attribute, *, follow_symlinks): ...
def os.setxattr(path: TaintSink[FileSystem], attribute, value, flags, *, follow_symlinks): ...

def shutil.rmtree(path: TaintSink[FileSystem], ignore_errors, onerror): ...
def shutil.copyfile(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, follow_symlinks): ...
def shutil.copymode(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, follow_symlinks): ...
def shutil.copystat(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, follow_symlinks): ...
def shutil.copy(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, follow_symlinks): ...
def shutil.copy2(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], *, follow_symlinks): ...
def shutil.copytree(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], symlinks, ignore, copy_function, ignore_dangling_symlinks): ...
def shutil.move(src: TaintSink[FileSystem], dst: TaintSink[FileSystem], copy_function): ...
def shutil.chown(path: TaintSink[FileSystem], user, group): ...
def shutil.make_archive(base_name: TaintSink[FileSystem], format, root_dir, base_dir: TaintSink[FileSystem], verbose, dry_run, owner, group, logger): ...
def shutil.unpack_archive(filename: TaintSink[FileSystem], extract_dir: TaintSink[FileSystem], format): ...

def zipfile.ZipFile.__init__(self, file: TaintSink[FileSystem], mode, compression, allowZip64): ...
def gzip.open(filename: TaintSink[FileSystem], mode, compresslevel, encoding, errors, newline): ...
def gzip.GzipFile.__init__(self, filename: TaintSink[FileSystem], mode, compresslevel, fileobj, mtime): ...
def bz2.open(filename: TaintSink[FileSystem], mode, compresslevel, encoding, errors, newline): ...

def tempfile.TemporaryFile(mode, buffering, encoding, newline, suffix, prefix: TaintSink[FileSystem], dir: TaintSink[FileSystem]): ...
def tempfile.NamedTemporaryFile(mode, buffering, encoding, newline, suffix, prefix: TaintSink[FileSystem], dir: TaintSink[FileSystem], delete): ...
def tempfile.SpooledTemporaryFile(max_size, mode, buffering, encoding, newline, suffix, prefix: TaintSink[FileSystem], dir: TaintSink[FileSystem]): ...
def tempfile.TemporaryDirectory(suffix: TaintSink[FileSystem], prefix: TaintSink[FileSystem], dir: TaintSink[FileSystem]): ...
def tempfile.mkstemp(suffix: TaintSink[FileSystem], prefix: TaintSink[FileSystem], dir: TaintSink[FileSystem], text): ...
def tempfile.mkdtemp(suffix: TaintSink[FileSystem], prefix: TaintSink[FileSystem], dir: TaintSink[FileSystem]): ...
def linecache.getline(filename: TaintSink[FileSystem], lineno, module_globals): ...
def linecache.lazycache(filename: TaintSink[FileSystem], module_globals): ...

def tarfile.TarFile.open(
    cls,
    name: TaintSink[FileSystem] = ...,
    mode = ...,
    fileobj = ...,
    bufsize = ...,
    format = ...,
    tarinfo = ...,
    dereference = ...,
    ignore_zeros = ...,
    encoding = ...,
    errors = ...,
    pax_headers = ...,
    debug = ...,
    errorlevel = ...
): ...
# tarfile.TarFile
def tarfile.TarFile.__init__(
    self,
    name: TaintSink[FileSystem] = ...,
    mode = ...,
    format = ...,
    tarinfo =...,
    dereference = ...,
    ignore_zeros = ...,
    encoding = ...,
    errors = ...,
    pax_headers = ...,
    debug = ...,
    errorlevel = ...,
    copybufsize = ...
): ...

# misc functions that accept file paths as a param
def marshal.load(__file: TaintSink[FileSystem]): ...
def marshal.dump(__value, __file: TaintSink[FileSystem], __version=...): ...
def shelve.DbfilenameShelf(filename: TaintSink[FileSystem], flag=..., protocol=..., writeback=...): ...
def shelve.open(filename: TaintSink[FileSystem], flag=..., protocol=..., writeback=...): ...
def pickle.Unpickler.__init__(
    self,
    file: TaintSink[FileSystem],
    fix_imports = ...,
    encoding = ...,
    errors = ...
): ...
def pickle.load(
    file: TaintSink[FileSystem],
    *,
    fix_imports=...,
    encoding=...,
    errors=...,
  ): ...
def urllib.request.urlretrieve(url, filename: TaintSink[FileSystem]=..., reporthook=..., data=...): ...

def pathlib.PurePath.__new__(cls, *args: TaintSink[FileSystem]): ...
def pathlib.PurePath.__truediv__(self, key: TaintSink[FileSystem]): ...
def pathlib.PurePath.__rtruediv__(self, key: TaintSink[FileSystem]): ...
def pathlib.Path.__new__(cls, *args: TaintSink[FileSystem], **kwargs): ...
def pathlib.Path.symlink_to(self: TaintSink[FileSystem], target: TaintSink[FileSystem], target_is_directory = ...): ...
def pathlib.Path.rglob(self, pattern: TaintSink[FileSystem]): ...

def pathlib.Path.chmod(self: TaintSink[FileSystem], mode): ...
def pathlib.Path.lchmod(self: TaintSink[FileSystem], mode): ...
def pathlib.Path.mkdir(self: TaintSink[FileSystem], mode = ..., parents = ..., exist_ok = ...): ...
def pathlib.Path.open(self: TaintSink[FileSystem], mode = ..., buffering = ..., encoding = ..., errors = ..., newline = ...): ...
def pathlib.Path.rename(self: TaintSink[FileSystem], target: TaintSink[FileSystem]): ...
def pathlib.Path.replace(self: TaintSink[FileSystem], target: TaintSink[FileSystem]): ...
def pathlib.Path.rmdir(self: TaintSink[FileSystem]): ...
def pathlib.Path.touch(self: TaintSink[FileSystem], mode = ..., exist_ok = ...): ...
def pathlib.Path.unlink(self: TaintSink[FileSystem]): ...
def pathlib.Path.read_bytes(self: TaintSink[FileSystem]): ...
def pathlib.Path.read_text(self: TaintSink[FileSystem], encoding = ..., errors = ...): ...
def pathlib.Path.write_bytes(self: TaintSink[FileSystem], data): ...
def pathlib.Path.write_text(self: TaintSink[FileSystem], data, encoding = ..., errors = ...): ...
