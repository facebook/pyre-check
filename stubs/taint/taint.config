{
  "comment": "UserControlled, Test, Demo sources are predefined. Same for Demo, Test and RemoteCodeExecution sinks",
  "sources": [
    {
      "name": "Cookies",
      "comment": "used to annotate cookie sources"
    },
    {
      "name": "Demo",
      "comment": "demo source"
    },
    {
      "name": "UserSecrets",
      "comment": "use to annotate passwords, tokens, etc."
    },
    {
      "name": "UserData",
      "comment": "use to annotate user data"
    },
    {
      "name": "UserControlled",
      "comment": "use to annotate all data that is controllable by the user making a request"
    },
    {
      "name": "UserControlled_Payload",
      "comment": "use to annotate data that is an entire payload from user requests (eg. GET/POST payloads)"
    },
    {
      "name": "UserControlled_Parameter",
      "comment": "use to annotate data that an individual parametr from user requests (eg. a single URL param)"
    },
    {
      "name": "UserControlled_Meta",
      "comment": "use to annotate metadata that comes with a user's request, but is not explicitly part of the payload (headers, cookies, etc)"
    },
    {
      "name": "Test",
      "comment": "test source"
    },
    {
      "name": "ServerSecrets",
      "comment": "use to annotate signing keys, access tokens, and other server secrets"
    },
    {
      "name": "HeaderData",
      "comment": "use to annotate headers, which may contain data that should be treated carefully"
    },
    {
      "name": "URL",
      "comment": "use to annotate whole or partial URLs"
    },
    {
      "name": "MemCache",
      "comment": "used to annotate locations of MemCache"
    },
    {
      "name": "DataFromGET",
      "comment": "Used to annotate data that comes from a GET request."
    },
    {
      "name": "MaybeDataFromGET",
      "comment": "Used to annotate data that may or may not come from a GET request."
    }
  ],
  "sinks": [
    {
      "name": "Demo",
      "comment": "demo sink"
    },
    {
      "name": "Test",
      "comment": "test sink"
    },
    {
      "name": "FileSystem",
      "comment": "use to annotate where data flows into file system"
    },
    {
      "name": "GetAttr",
      "comment": "used to annotate `getattr` function"
    },
    {
      "name": "Logging",
      "comment": "use to annotate where data is logged"
    },
    {
      "name": "Redirect",
      "comment": "use to annotate where data influences a redirect sent to the user"
    },
    {
      "name": "RemoteCodeExecution",
      "comment": "use to annotate where inputs can lead to code execution"
    },
    {
      "name": "RequestSend",
      "comment": "use to annotate where data influences request sending"
    },
    {
      "name": "ReturnedToUser",
      "comment": "use to annotate locations where data is returned to users"
    },
    {
      "name": "ResponseHeaderName",
      "comment": "use to annotate locations where header names are set on responses"
    },
    {
      "name": "ResponseHeaderValue",
      "comment": "use to annotate locations where header values are set on responses"
    },
    {
      "name": "SQL",
      "comment": "use to annotate places of SQL injection risk"
    },
    {
      "name": "XMLParser",
      "comment": "use to annotate where data is parsed for XML"
    },
    {
      "name": "XSS",
      "comment": "use to annotate where data can cause XSS"
    },
    {
      "name": "MemcacheSink",
      "comment": "used to annotate locations of MemCache"
    },
    {
      "name": "DataStorage",
      "comment": "used to annotate locations where data enters a persistent data store"
    },
    {
      "name": "ServerSideTemplateInjection",
      "comment": "used to annotate locations of Server Side Template Injection risk"
    }
  ],
  "features": [
    {
      "name": "string_concat_lhs",
      "comment": "via a string created by tainted_str + 's'"
    },
    {
      "name": "string_concat_rhs",
      "comment": "via a string created by 's' + tainted_str"
    },
    {
      "name": "getattr",
      "comment": "via getattr first parameter"
    },
    {
      "name": "request_files",
      "comment": "via django request.FILES"
    },
    {
      "name": "bytesio",
      "comment": "via io.BytesIO object"
    },
    {
      "name": "furl_query_params",
      "comment": "Indicates taint passed through furl.furl as a query param"
    },
    {
      "name": "furl_path",
      "comment": "Indicates taint passed through furl.furl as a path"
    },
    {
      "name": "furl_fragment",
      "comment": "Indicates taint passed through furl.furl as a fragment"
    },
    {
      "name": "furl_scheme",
      "comment": "Indicates taint passed through furl.furl as a scheme"
    },
    {
      "name": "furl_host",
      "comment": "Indicates taint passed through furl.furl as a host"
    },
    {
      "name": "furl_port",
      "comment": "Indicates taint passed through furl.furl as a port"
    },
    {
      "name": "furl_netloc",
      "comment": "Indicates taint passed through furl.furl as a network location"
    },
    {
      "name": "furl_origin",
      "comment": "Indicates taint passed through furl.furl as an origin"
    },
    {
      "name": "furl_url",
      "comment": "Indicates taint passed through furl.furl as a url"
    },
    {
      "name": "urllib_quote_plus",
      "comment": "Indicates a taint passed through the 'urllib.quote_plus' function"
    },
    {
      "name": "escape_html",
      "comment": "Indicates a taint passed through a function that escapes data for embedding in HTML documents"
    },
    {
      "name": "hmac_key",
      "comment": "Indicates taint passed through the HMAC algorithm as a key."
    },
    {
      "name": "boolean",
      "comment": "Indicates flow passed through conversion to 'bool'."
    },
    {
      "name": "requests_metadata",
      "comment": "Indicates a flow going to requests APIs kwargs (body, query_string), usually is not SSRF. It is a code smell"
    },
    {
      "name": "code_smell",
      "comment": "Indicates that the flow is usually code smell and does not have a direct security or privacy impact"
    },
    {
      "name": "command_line_args",
      "comment": "Indicates when an RCE injection is going through the args and not the actual binary"
    },
    {
      "name": "external_query",
      "comment": "Indicates that this flow passed through some external query (GraphQL, Database, etc.), and thus might not reflect the original tainted data anymore"
    },
    {
      "name": "django_model_query",
      "comment": "Indicates that this flow passed through a query of a Django Model object, and thus might not reflect the original tainted data anymore"
    },
    {
      "name": "benign",
      "comment": "Indicates that data was transformed in some way that likely renders it benign (conversion to bool, length take, uncontrollable attributes like __name__ accessed)"
    },
    {
      "name": "type",
      "comment": "Indicates that data in this flow passed through a type constructor"
    },
    {
      "name": "len",
      "comment": "Indicates taint passed through the 'len()' built-in function"
    }
  ],
  "rules": [
    {
      "name": "Possible shell injection",
      "code": 5001,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "RemoteCodeExecution"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "Test flow",
      "code": 5002,
      "sources": [
        "Test",
        "UserControlled"
      ],
      "sinks": [
        "Test"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "SQL injection.",
      "code": 5005,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "SQL"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "User data to XML Parser.",
      "code": 5007,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "XMLParser"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "XSS",
      "code": 5008,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "XSS"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "Demo flow",
      "code": 5009,
      "sources": [
        "Demo"
      ],
      "sinks": [
        "Demo"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "User data to getattr",
      "code": 5010,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "GetAttr"
      ],
      "message_format": "Attacker may control at least one argument to getattr(,)."
    },
    {
      "name": "User data to filesystem operation",
      "code": 5011,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "FileSystem"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "Potential Server-side request forgery (SSRF)",
      "code": 5012,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "RequestSend"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "Open redirect",
      "code": 5018,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "Redirect"
      ],
      "message_format": "Data from [{$sources}] source(s) may be used in an open redirect via [{$sinks}] sink(s)"
    },
    {
      "name": "Server secrets reach exit",
      "code": 5027,
      "sources": [
        "ServerSecrets"
      ],
      "sinks": [
        "ReturnedToUser"
      ],
      "message_format": "Server secrets such as keys and access tokens are being returned to users"
    },
    {
      "name": "User controlled response headers",
      "code": 5029,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "ResponseHeaderName",
        "ResponseHeaderValue"
      ],
      "message_format": "User controlled data is used to set headers on a response"
    },
    {
      "name": "User data logged",
      "code": 5201,
      "sources": [
        "UserControlled",
        "UserData"
      ],
      "sinks": [
        "Logging"
      ],
      "message_format": "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      "name": "Potential Server Side Template Injection",
      "code": 6073,
      "sources": [
        "UserControlled"
      ],
      "sinks": [
        "ServerSideTemplateInjection"
      ],
      "message_format": "User controlled data may eventually flow into a Server Side Template Injection sink"
    }
  ]
}
