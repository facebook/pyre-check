# Requests

def aiohttp.web_request.BaseRequest.rel_url(self) -> TaintSource[UserControlled, UserControlled_Payload, URL]: ...
def aiohttp.web_request.BaseRequest.__getitem__(self, key)-> TaintSource[UserControlled, UserControlled_Payload]: ...
def aiohttp.web_request.BaseRequest.__iter__(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
def aiohttp.web_request.BaseRequest.forwarded(self)-> TaintSource[UserControlled, UserControlled_Meta, HeaderData]: ...
def aiohttp.web_request.BaseRequest.url(self)-> TaintSource[UserControlled, UserControlled_Payload, URL]: ...
def aiohttp.web_request.BaseRequest.path(self)-> TaintSource[UserControlled, UserControlled_Payload, URL]: ...
def aiohttp.web_request.BaseRequest.path_qs(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
def aiohttp.web_request.BaseRequest.raw_path(self)-> TaintSource[UserControlled, UserControlled_Payload, URL]: ...
def aiohttp.web_request.BaseRequest.query(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
def aiohttp.web_request.BaseRequest.query_string(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
def aiohttp.web_request.BaseRequest.headers(self)-> TaintSource[UserControlled, UserControlled_Meta, HeaderData]: ...
def aiohttp.web_request.BaseRequest.raw_headers(self)-> TaintSource[UserControlled, UserControlled_Meta, HeaderData]: ...
def aiohttp.web_request.BaseRequest.cookies(self)-> TaintSource[UserControlled, UserControlled_Meta, Cookies]: ...
def aiohttp.web_request.BaseRequest.http_range(self)-> TaintSource[UserControlled, UserControlled_Meta]: ...
def aiohttp.web_request.BaseRequest.content(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_request.BaseRequest.read(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_request.BaseRequest.text(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_request.BaseRequest.json(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_request.BaseRequest.multipart(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_request.BaseRequest.post(self)-> TaintSource[UserControlled, UserControlled_Payload]: ...
def aiohttp.web_request.BaseRequest.__repr__(self)-> TaintSource[UserControlled, UserControlled_Payload, URL]: ...

def aiohttp.web_request.Request.match_info(self) -> TaintSource[UserControlled, UserControlled_Payload]: ...
@property
def aiohttp.web_request.Request.app(self) -> TaintSource[UserControlled, UserControlled_Parameter]: ...
@property
def aiohttp.web_request.Request.config_dict(self) -> TaintSource[UserControlled, UserControlled_Parameter]: ...

# Responses
def aiohttp.web_exceptions._HTTPMove.__init__(
    self,
    location: TaintSink[Redirect, ReturnedToUser],
    *,
    headers: TaintSink[ResponseHeaderName, ResponseHeaderValue, ReturnedToUser],
    reason: TaintSink[ReturnedToUser],
    text: TaintSink[ReturnedToUser],
    content_type: TaintSink[ReturnedToUser],
): ...
def aiohttp.web_exceptions.HTTPException.__init__(
    self,
    *,
    headers: TaintSink[ResponseHeaderName, ResponseHeaderValue, ReturnedToUser],
    reason: TaintSink[ReturnedToUser],
    text: TaintSink[ReturnedToUser],
    content_type: TaintSink[ReturnedToUser],
): ...
def aiohttp.web_exceptions.HTTPMethodNotAllowed.__init__(
    self,
    method: TaintSink[ReturnedToUser],
    allowed_methods: TaintSink[ReturnedToUser],
    *,
    headers: TaintSink[ResponseHeaderName, ResponseHeaderValue, ReturnedToUser],
    reason: TaintSink[ReturnedToUser],
    text: TaintSink[ReturnedToUser],
    content_type: TaintSink[ReturnedToUser],
): ...
def aiohttp.web_exceptions.HTTPUnavailableForLegalReasons.__init__(
    self,
    link: TaintSink[ReturnedToUser],
    *,
    headers: TaintSink[ResponseHeaderName, ResponseHeaderValue, ReturnedToUser],
    reason: TaintSink[ReturnedToUser],
    text: TaintSink[ReturnedToUser],
    content_type: TaintSink[ReturnedToUser],
): ...

def aiohttp.web_response.StreamResponse.__init__(
    self,
    *,
    status,
    reason: TaintSink[ReturnedToUser],
    headers: TaintSink[ReturnedToUser, ResponseHeaderName, ResponseHeaderValue],
): ...
@property
def aiohttp.web_response.StreamResponse.headers(self) -> TaintSource[HeaderData]: ...
@property
def aiohttp.web_response.StreamResponse.cookies(self) -> TaintSource[Cookies]: ...
async def aiohttp.web_response.StreamResponse.write_eof(self, data: TaintSink[ReturnedToUser]): ...

def aiohttp.web_response.Response.__init__(
    self,
    *,
    body: TaintSink[ReturnedToUser],
    status,
    reason: TaintSink[ReturnedToUser],
    text: TaintSink[ReturnedToUser],
    headers: TaintSink[ResponseHeaderName, ResponseHeaderValue, ReturnedToUser],
    content_type: TaintSink[ReturnedToUser],
    charset: TaintSink[ReturnedToUser],
    zlib_executor_size,
    zlib_executor,
): ...
@body.setter
def aiohttp.web_response.Response.body(
    self,
    body: TaintSink[ReturnedToUser]
): ...
@text.setter
def aiohttp.web_response.Response.text(self, text: TaintSink[ReturnedToUser]): ...

def aiohttp.web_response.json_response(
    data: TaintSink[ReturnedToUser],
    *,
    text: TaintSink[ReturnedToUser],
    body: TaintSink[ReturnedToUser],
    status,
    reason: TaintSink[ReturnedToUser],
    headers: TaintSink[ResponseHeaderName, ResponseHeaderValue, ReturnedToUser],
    content_type: TaintSink[ReturnedToUser],
    dumps,
): ...

async def aiohttp.web_ws.WebSocketResponse.ping(self, message: TaintSink[ReturnedToUser]): ...
async def aiohttp.web_ws.WebSocketResponse.pong(self, message: TaintSink[ReturnedToUser]): ...
async def aiohttp.web_ws.WebSocketResponse.send_str(self, data: TaintSink[ReturnedToUser],): ...
async def aiohttp.web_ws.WebSocketResponse.send_bytes(self, data: TaintSink[ReturnedToUser]): ...
async def aiohttp.web_ws.WebSocketResponse.send_json(self, data: TaintSink[ReturnedToUser]): ...
async def aiohttp.web_ws.WebSocketResponse.close(self, *, code, message: TaintSink[ReturnedToUser]): ...
async def aiohttp.web_ws.WebSocketResponse.receive(self) -> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_ws.WebSocketResponse.receive_str(self,) -> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_ws.WebSocketResponse.receive_bytes(self) -> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_ws.WebSocketResponse.receive_json(self) -> TaintSource[UserControlled, UserControlled_Payload]: ...
async def aiohttp.web_ws.WebSocketResponse.write(self, data: TaintSink[ReturnedToUser]): ...
def aiohttp.web_ws.WebSocketResponse.__aiter__(self) -> TaintSource[UserControlled]: ...
async def aiohttp.web_ws.WebSocketResponse.__anext__(self) -> TaintSource[UserControlled]: ...
