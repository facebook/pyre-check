# Requires mypy_boto3 stubs and explicit type annotations to work because the stubs
# for boto3.get_client("client-name") defines it to return `typing.any`.

def mypy_boto3_acm.client.ACMClient.export_certificate() -> TaintSource[ServerSecrets]: ...

def mypy_boto3_amplifybackend.client.AmplifyBackendClient.create_token() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_amplifybackend.client.AmplifyBackendClient.get_backend_auth() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_amplifybackend.client.AmplifyBackendClient.get_token() -> TaintSource[ServerSecrets]: ...

def mypy_boto3_apigateway.client.APIGatewayClient.create_api_key() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_apigateway.client.APIGatewayClient.get_api_key() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_apigateway.client.APIGatewayClient.get_api_keys() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_apigateway.client.APIGatewayClient.get_authorizer() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_apigateway.client.APIGatewayClient.get_client_certificate() -> TaintSource[ServerSecrets]: ...
def mypy_boto3_apigateway.client.APIGatewayClient.get_client_certificates() -> TaintSource[ServerSecrets]: ...

# ApplicationInsight can contain sensitive application details like exception messages
# It also however, can contain other things in the log. Might have to switch to a new
# TaintSource...
def mypy_boto3_application_insights.client.ApplicationInsightsClient.list_configuration_history() -> TaintSource[ExceptionMessage]: ...
def mypy_boto3_application_insights.client.ApplicationInsightsClient.list_log_pattern_sets() -> TaintSource[ExceptionMessage]: ...
def mypy_boto3_application_insights.client.ApplicationInsightsClient.list_log_patterns() -> TaintSource[ExceptionMessage]: ...
def mypy_boto3_application_insights.client.ApplicationInsightsClient.list_problems() -> TaintSource[ExceptionMessage]: ...

# AWS Lambda RemoteCodeExecution Sinks
def mypy_boto3_lambda.client.LambdaClient.create_function(Code: TaintSink[RemoteCodeExecution], ImageConfig: TaintSink[RemoteCodeExecution]): ...
def mypy_boto3_lambda.client.LambdaClient.update_function_code(ZipFile: TaintSink[RemoteCodeExecution], S3Bucket: TaintSink[RemoteCodeExecution], ImageUri: TaintSink[RemoteCodeExecution]): ...

# Not direct, but a new service is run with the provided source code
def mypy_boto3_apprunner.client.AppRunnerClient.create_service(SourceConfiguration: TaintSink[RemoteCodeExecution]): ...

def mypy_boto3_athena.client.AthenaClient.create_named_query(QueryString: TaintSink[SQL]): ...
def mypy_boto3_athena.client.AthenaClient.create_prepared_statement(QueryStatement: TaintSink[SQL]): ...

def mypy_boto3_braket.client.BraketClient.create_quantum_task(action: TaintSink[RemoteCodeExecution]): ...

# Athena
def mypy_boto3_athena.client.AthenaClient.create_named_query(QueryString: TaintSink[SQL]): ...
def mypy_boto3_athena.client.AthenaClient.create_prepared_statement(QueryStatement: TaintSink[SQL]): ...

# RDS
def mypy_boto3_rds_data.client.RDSDataServiceClient.batch_execute_statement(sql: TaintSink[SQL]): ...
def mypy_boto3_rds_data.client.RDSDataServiceClient.execute_sql(sqlStatements: TaintSink[SQL]): ...
def mypy_boto3_rds_data.client.RDSDataServiceClient.execute_statement(sql: TaintSink[SQL]): ...

# Redshift
def mypy_boto3_redshift_data.client.RedshiftDataAPIServiceClient.execute_statement(Sql: TaintSink[SQL]): ...
def mypy_boto3_redshift_data.client.RedshiftDataAPIServiceClient.batch_execute_statement(Sqls: TaintSink[SQL]): ...
