def tornado.web.RequestHandler.get_argument(
    self,
    name,
    default,
    strip,
) -> TaintSource[UserControlled, UserControlled_Parameter]: ...
def tornado.web.RequestHandler.get_arguments(self, name, strip) -> TaintSource[UserControlled, UserControlled_Parameter]: ...
def tornado.web.RequestHandler.get_body_argument(
    self,
    name,
    default,
    strip,
) -> TaintSource[UserControlled, UserControlled_Parameter]: ...
def tornado.web.RequestHandler.get_body_arguments(self, name, strip) -> TaintSource[UserControlled, UserControlled_Parameter]: ...
def tornado.web.RequestHandler.get_query_argument(
    self,
    name,
    default,
    strip,
) -> TaintSource[UserControlled, UserControlled_Parameter]: ...
def tornado.web.RequestHandler.get_query_arguments(self, name, strip) -> TaintSource[UserControlled, UserControlled_Parameter]: ...

def tornado.web.RequestHandler.write(self, chunk: TaintSink[ReturnedToUser]): ...

def tornado.web.RequestHandler.set_header(self, name: TaintSink[ResponseHeaderName], value: TaintSink[ResponseHeaderValue, ViaValueOf[name]]): ...
def tornado.web.RequestHandler.add_header(self, name: TaintSink[ResponseHeaderName], value: TaintSink[ResponseHeaderValue, ViaValueOf[name]]): ...

def tornado.web.RequestHandler.redirect(self, url: TaintSink[Redirect], permanent, status): ...

tornado.web.RequestHandler.path_args: TaintSource[UserControlled, UserControlled_Payload]
tornado.web.RequestHandler.path_kwargs: TaintSource[UserControlled, UserControlled_Payload]

tornado.httputil.HTTPServerRequest.path: TaintSource[URL]
tornado.httputil.HTTPServerRequest.uri: TaintSource[URL]

tornado.httputil.HTTPServerRequest.headers: TaintSource[UserControlled, UserControlled_Meta]

@property
def tornado.httputil.HTTPServerRequest.cookies(self) -> TaintSource[UserControlled, UserControlled_Meta, Cookies]: ...

tornado.httputil.HTTPServerRequest.files: TaintSource[UserControlled, UserControlled_Payload, Via[request_files]]

tornado.httputil.HTTPServerRequest.query: TaintSource[UserControlled, UserControlled_Payload]
tornado.httputil.HTTPServerRequest.body: TaintSource[UserControlled, UserControlled_Payload]
tornado.httputil.HTTPServerRequest.arguments: TaintSource[UserControlled, UserControlled_Payload]
tornado.httputil.HTTPServerRequest.query_arguments: TaintSource[UserControlled, UserControlled_Payload]
tornado.httputil.HTTPServerRequest.body_arguments: TaintSource[UserControlled, UserControlled_Payload]

ModelQuery(
  find = "methods",
  where = [
    parent.extends("tornado.web.RequestHandler", is_transitive=True),
    AnyOf(
      name.matches("\.get$"),
      name.matches("\.post$"),
      name.matches("\.head$"),
      name.matches("\.delete$"),
      name.matches("\.patch$"),
      name.matches("\.put$"),
      name.matches("\.options$"),
    )
  ],
  model = [
    Parameters(
      TaintSource[UserControlled, UserControlled_Parameter],
      where=Not(name.equals("self"))
    )
  ]
)
